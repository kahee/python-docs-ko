# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-07-08 11:36+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dong-gweon Oh <flowdas@gmail.com>\n"
"Language-Team: Korean (https://python.flowdas.com)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../Doc/library/json.rst:2
msgid ":mod:`json` --- JSON encoder and decoder"
msgstr ":mod:`json` --- JSON 인코더와 디코더"

#: ../Doc/library/json.rst:10
msgid "**Source code:** :source:`Lib/json/__init__.py`"
msgstr "**소스 코드:** :source:`Lib/json/__init__.py`"

#: ../Doc/library/json.rst:14
msgid ""
"`JSON (JavaScript Object Notation) <http://json.org>`_, specified by "
":rfc:`7159` (which obsoletes :rfc:`4627`) and by `ECMA-404 <http://www"
".ecma-international.org/publications/standards/Ecma-404.htm>`_, is a "
"lightweight data interchange format inspired by `JavaScript "
"<https://en.wikipedia.org/wiki/JavaScript>`_ object literal syntax "
"(although it is not a strict subset of JavaScript [#rfc-errata]_ )."
msgstr ""
":rfc:`7159`\\(:rfc:`4627`\\을 대체합니다)와 `ECMA-404 <http://www.ecma-"
"international.org/publications/standards/Ecma-404.htm>`_\\로 규정되는 `JSON "
"(JavaScript Object Notation) <http://json.org>`_\\은 `JavaScript "
"<https://en.wikipedia.org/wiki/JavaScript>`_ 객체 리터럴 문법에서 영감을 얻은 경량 데이터 교환"
" 형식입니다 (JavaScript [#rfc-errata]_\\의 엄격한 부분집합은 아닙니다)."

#: ../Doc/library/json.rst:21
msgid ""
":mod:`json` exposes an API familiar to users of the standard library "
":mod:`marshal` and :mod:`pickle` modules."
msgstr ""
":mod:`json`\\은 표준 라이브러리 :mod:`marshal`\\과 :mod:`pickle` 모듈 사용자에게 익숙한 API를"
" 제공합니다."

#: ../Doc/library/json.rst:24
msgid "Encoding basic Python object hierarchies::"
msgstr "기본 파이썬 객체 계층 구조 인코딩::"

#: ../Doc/library/json.rst:43
msgid "Compact encoding::"
msgstr "간결한 인코딩::"

#: ../Doc/library/json.rst:49
msgid "Pretty printing::"
msgstr "예쁜 인쇄::"

#: ../Doc/library/json.rst:58
msgid "Decoding JSON::"
msgstr "JSON 디코딩::"

#: ../Doc/library/json.rst:70
msgid "Specializing JSON object decoding::"
msgstr "JSON 객체 디코딩 특수화::"

#: ../Doc/library/json.rst:85
msgid "Extending :class:`JSONEncoder`::"
msgstr ":class:`JSONEncoder` 확장하기::"

#: ../Doc/library/json.rst:103
msgid "Using :mod:`json.tool` from the shell to validate and pretty-print:"
msgstr "셸에서 :mod:`json.tool`\\을 사용하여 유효성을 검사하고 예쁘게 인쇄합니다:"

#: ../Doc/library/json.rst:114
msgid "See :ref:`json-commandline` for detailed documentation."
msgstr "자세한 설명은 :ref:`json-commandline`\\를 참조하십시오."

#: ../Doc/library/json.rst:118
msgid ""
"JSON is a subset of `YAML <http://yaml.org/>`_ 1.2.  The JSON produced by"
" this module's default settings (in particular, the default *separators* "
"value) is also a subset of YAML 1.0 and 1.1.  This module can thus also "
"be used as a YAML serializer."
msgstr ""
"JSON은 `YAML <http://yaml.org/>`_ 1.2의 부분 집합입니다. 이 모듈의 기본 설정(특히 기본 "
"*separators* 값)으로 생성된 JSON은 YAML 1.0과 1.1의 부분 집합이기도 합니다. 따라서 이 모듈을 YAML "
"직렬화기로 사용할 수도 있습니다."

#: ../Doc/library/json.rst:125
msgid "Basic Usage"
msgstr "기본 사용법"

#: ../Doc/library/json.rst:132
msgid ""
"Serialize *obj* as a JSON formatted stream to *fp* (a "
"``.write()``-supporting :term:`file-like object`) using this "
":ref:`conversion table <py-to-json-table>`."
msgstr ""
"이 :ref:`변환표 <py-to-json-table>`\\를 사용하여 *obj*\\를 JSON 형식 스트림으로 "
"*fp*\\(``.write()``\\를 지원하는 :term:`파일류 객체 <file-like object>`)로 직렬화합니다."

#: ../Doc/library/json.rst:136
msgid ""
"If *skipkeys* is true (default: ``False``), then dict keys that are not "
"of a basic type (:class:`str`, :class:`int`, :class:`float`, "
":class:`bool`, ``None``) will be skipped instead of raising a "
":exc:`TypeError`."
msgstr ""
"*skipkeys*\\가 참이면 (기본값: ``False``), 기본형(:class:`str`, :class:`int`, "
":class:`float`, :class:`bool`, ``None``)이 아닌 딕셔너리 키는 :exc:`TypeError`\\를 "
"발생시키는 대신 건너뜁니다."

#: ../Doc/library/json.rst:140
msgid ""
"The :mod:`json` module always produces :class:`str` objects, not "
":class:`bytes` objects. Therefore, ``fp.write()`` must support "
":class:`str` input."
msgstr ""
":mod:`json` 모듈은 항상 :class:`bytes` 객체가 아니라 :class:`str` 객체를 생성합니다. 따라서, "
"``fp.write()``\\는 :class:`str` 입력을 지원해야 합니다."

#: ../Doc/library/json.rst:144 ../Doc/library/json.rst:417
msgid ""
"If *ensure_ascii* is true (the default), the output is guaranteed to have"
" all incoming non-ASCII characters escaped.  If *ensure_ascii* is false, "
"these characters will be output as-is."
msgstr ""
"*ensure_ascii*\\가 참(기본값)이면, 출력에서 모든 비 ASCII 문자가 이스케이프 되도록 보장됩니다. "
"*ensure_ascii*\\가 거짓이면, 그 문자들은 있는 그대로 출력됩니다."

#: ../Doc/library/json.rst:148
msgid ""
"If *check_circular* is false (default: ``True``), then the circular "
"reference check for container types will be skipped and a circular "
"reference will result in an :exc:`OverflowError` (or worse)."
msgstr ""
"*check_circular*\\가 거짓이면 (기본값: ``True``), 컨테이너형에 대한 순환 참조 검사를 건너뛰고 순환 참조는"
" :exc:`OverflowError`\\를 일으킵니다 (또는 더 나빠질 수 있습니다)."

#: ../Doc/library/json.rst:152
msgid ""
"If *allow_nan* is false (default: ``True``), then it will be a "
":exc:`ValueError` to serialize out of range :class:`float` values "
"(``nan``, ``inf``, ``-inf``) in strict compliance of the JSON "
"specification. If *allow_nan* is true, their JavaScript equivalents "
"(``NaN``, ``Infinity``, ``-Infinity``) will be used."
msgstr ""
"*allow_nan*\\이 거짓이면 (기본값: ``True``), JSON 사양을 엄격히 준수하여 범위를 벗어난 "
":class:`float` 값(``nan``, ``inf``, ``-inf``)을 직렬화하면 :exc:`ValueError`\\를 "
"일으킵니다. *allow_nan*\\이 참이면, JavaScript의 대응 물(``NaN``, ``Infinity``, "
"``-Infinity``)이 사용됩니다."

#: ../Doc/library/json.rst:158 ../Doc/library/json.rst:436
msgid ""
"If *indent* is a non-negative integer or string, then JSON array elements"
" and object members will be pretty-printed with that indent level.  An "
"indent level of 0, negative, or ``\"\"`` will only insert newlines.  "
"``None`` (the default) selects the most compact representation. Using a "
"positive integer indent indents that many spaces per level.  If *indent* "
"is a string (such as ``\"\\t\"``), that string is used to indent each "
"level."
msgstr ""
"*indent*\\가 음이 아닌 정수나 문자열이면, JSON 배열 요소와 오브젝트 멤버가 해당 들여쓰기 수준으로 예쁘게 인쇄됩니다."
" 0, 음수 또는 ``\"\"``\\의 들여쓰기 수준은 줄 넘김만 삽입합니다. ``None``\\(기본값)은 가장 "
"간결한(compact) 표현을 선택합니다. 양의 정수 indent를 사용하면, 수준 당 그만큼의 스페이스로 들여쓰기합니다. "
"*indent*\\가 문자열이면 (가령 ``\"\\t\"``), 각 수준을 들려 쓰는 데 그 문자열을 사용합니다."

#: ../Doc/library/json.rst:165 ../Doc/library/json.rst:443
msgid "Allow strings for *indent* in addition to integers."
msgstr "*indent*\\에 정수뿐만 아니라 문자열을 허용합니다."

#: ../Doc/library/json.rst:168 ../Doc/library/json.rst:446
msgid ""
"If specified, *separators* should be an ``(item_separator, "
"key_separator)`` tuple.  The default is ``(', ', ': ')`` if *indent* is "
"``None`` and ``(',', ': ')`` otherwise.  To get the most compact JSON "
"representation, you should specify ``(',', ':')`` to eliminate "
"whitespace."
msgstr ""
"지정되면, *separators*\\는 ``(item_separator, key_separator)`` 튜플이어야 합니다. 기본값은"
" *indent*\\가 ``None``\\이면 ``(', ', ': ')``\\이고, 그렇지 않으면 ``(',', ': "
"')``\\입니다. 가장 간결한 JSON 표현을 얻으려면, ``(',', ':')``\\를 지정하여 공백을 제거해야 합니다."

#: ../Doc/library/json.rst:173 ../Doc/library/json.rst:451
msgid "Use ``(',', ': ')`` as default if *indent* is not ``None``."
msgstr "*indent*\\가 ``None``\\이 아니면, ``(',', ': ')``\\를 기본값으로 사용합니다."

#: ../Doc/library/json.rst:176 ../Doc/library/json.rst:454
msgid ""
"If specified, *default* should be a function that gets called for objects"
" that can't otherwise be serialized.  It should return a JSON encodable "
"version of the object or raise a :exc:`TypeError`.  If not specified, "
":exc:`TypeError` is raised."
msgstr ""
"지정되면, *default*\\는 달리 직렬화할 수 없는 객체에 대해 호출되는 함수여야 합니다. 객체의 JSON 인코딩 가능한 "
"버전을 반환하거나 :exc:`TypeError`\\를 발생시켜야 합니다. 지정하지 않으면, :exc:`TypeError`\\가 "
"발생합니다."

#: ../Doc/library/json.rst:181
msgid ""
"If *sort_keys* is true (default: ``False``), then the output of "
"dictionaries will be sorted by key."
msgstr "*sort_keys*\\가 참이면 (기본값: ``False``), 딕셔너리의 출력이 키로 정렬됩니다."

#: ../Doc/library/json.rst:184
msgid ""
"To use a custom :class:`JSONEncoder` subclass (e.g. one that overrides "
"the :meth:`default` method to serialize additional types), specify it "
"with the *cls* kwarg; otherwise :class:`JSONEncoder` is used."
msgstr ""
"사용자 정의 :class:`JSONEncoder` 서브 클래스(예를 들어, :meth:`default` 메서드를 재정의하여 추가 "
"형을 직렬화하는 것)를 사용하려면, *cls* 키워드 인자로 지정하십시오; 그렇지 않으면 :class:`JSONEncoder`\\가"
" 사용됩니다."

#: ../Doc/library/json.rst:188 ../Doc/library/json.rst:262
msgid ""
"All optional parameters are now :ref:`keyword-only <keyword-"
"only_parameter>`."
msgstr "모든 선택적 매개 변수는 이제 :ref:`키워드-전용 <keyword-only_parameter>`\\입니다."

#: ../Doc/library/json.rst:197
msgid ""
"Serialize *obj* to a JSON formatted :class:`str` using this "
":ref:`conversion table <py-to-json-table>`.  The arguments have the same "
"meaning as in :func:`dump`."
msgstr ""
"이 :ref:`변환표 <py-to-json-table>`\\를 사용하여 *obj*\\를 JSON 형식의 :class:`str`\\로"
" 직렬화합니다. 인자는 :func:`dump`\\에서와 같은 의미입니다."

#: ../Doc/library/json.rst:203
msgid ""
"Unlike :mod:`pickle` and :mod:`marshal`, JSON is not a framed protocol, "
"so trying to serialize multiple objects with repeated calls to "
":func:`dump` using the same *fp* will result in an invalid JSON file."
msgstr ""
":mod:`pickle`\\과 :mod:`marshal`\\과 달리, JSON은 프레임 프로토콜이 아니므로 같은 *fp*\\를 "
"사용하여 :func:`dump`\\를 반복 호출하여 여러 객체를 직렬화하려고 하면 잘못된 JSON 파일이 생성됩니다."

#: ../Doc/library/json.rst:209
msgid ""
"Keys in key/value pairs of JSON are always of the type :class:`str`. When"
" a dictionary is converted into JSON, all the keys of the dictionary are "
"coerced to strings. As a result of this, if a dictionary is converted "
"into JSON and then back into a dictionary, the dictionary may not equal "
"the original one. That is, ``loads(dumps(x)) != x`` if x has non-string "
"keys."
msgstr ""
"JSON의 키/값 쌍에 있는 키는 항상 :class:`str` 형입니다. 딕셔너리를 JSON으로 변환하면, 딕셔너리의 모든 키가 "
"문자열로 강제 변환됩니다. 이것의 결과로, 딕셔너리를 JSON으로 변환한 다음 다시 딕셔너리로 변환하면, 딕셔너리가 원래의 것과 "
"같지 않을 수 있습니다. 즉, x에 비 문자열 키가 있으면 ``loads(dumps(x)) != x``\\입니다."

#: ../Doc/library/json.rst:218
msgid ""
"Deserialize *fp* (a ``.read()``-supporting :term:`text file` or "
":term:`binary file` containing a JSON document) to a Python object using "
"this :ref:`conversion table <json-to-py-table>`."
msgstr ""
"이 :ref:`변환표 <json-to-py-table>`\\를 사용하여 *fp*\\(JSON 문서를 포함하는 "
"``.read()``\\를 지원하는 :term:`텍스트 파일 <text file>`\\이나 :term:`바이너리 파일 <binary"
" file>`)를 파이썬 객체로 역 직렬화합니다."

#: ../Doc/library/json.rst:222
msgid ""
"*object_hook* is an optional function that will be called with the result"
" of any object literal decoded (a :class:`dict`).  The return value of "
"*object_hook* will be used instead of the :class:`dict`.  This feature "
"can be used to implement custom decoders (e.g. `JSON-RPC "
"<http://www.jsonrpc.org>`_ class hinting)."
msgstr ""
"*object_hook*\\은 모든 오브젝트 리터럴의 디코딩된 결과(:class:`dict`)로 호출되는 선택적 함수입니다. "
"*object_hook*\\의 반환 값이 :class:`dict` 대신에 사용됩니다. 이 기능은 사용자 정의 디코더를 구현하는 데 "
"사용할 수 있습니다 (예를 들어, `JSON-RPC <http://www.jsonrpc.org>`_ 클래스 힌팅(class "
"hinting))."

#: ../Doc/library/json.rst:228
msgid ""
"*object_pairs_hook* is an optional function that will be called with the "
"result of any object literal decoded with an ordered list of pairs.  The "
"return value of *object_pairs_hook* will be used instead of the "
":class:`dict`.  This feature can be used to implement custom decoders. If"
" *object_hook* is also defined, the *object_pairs_hook* takes priority."
msgstr ""
"*object_pairs_hook*\\은 모든 오브젝트 리터럴의 쌍의 순서 있는 목록으로 디코딩된 결과로 호출되는 선택적 "
"함수입니다. :class:`dict` 대신 *object_pairs_hook*\\의 반환 값이 사용됩니다. 이 기능은 사용자 정의 "
"디코더를 구현하는 데 사용할 수 있습니다. *object_hook*\\도 정의되어 있으면, *object_pairs_hook*\\이"
" 우선순위를 갖습니다."

#: ../Doc/library/json.rst:234 ../Doc/library/json.rst:331
msgid "Added support for *object_pairs_hook*."
msgstr "*object_pairs_hook*\\에 대한 지원이 추가되었습니다."

#: ../Doc/library/json.rst:237 ../Doc/library/json.rst:334
msgid ""
"*parse_float*, if specified, will be called with the string of every JSON"
" float to be decoded.  By default, this is equivalent to "
"``float(num_str)``. This can be used to use another datatype or parser "
"for JSON floats (e.g. :class:`decimal.Decimal`)."
msgstr ""
"*parse_float*\\가 지정되면, 디코딩될 모든 JSON float의 문자열로 호출됩니다. 기본적으로, 이것은 "
"``float(num_str)``\\와 동등합니다. JSON float에 대해 다른 데이터형이나 구문 분석기를 사용하고자 할 때 "
"사용될 수 있습니다 (예를 들어, :class:`decimal.Decimal`)."

#: ../Doc/library/json.rst:242 ../Doc/library/json.rst:339
msgid ""
"*parse_int*, if specified, will be called with the string of every JSON "
"int to be decoded.  By default, this is equivalent to ``int(num_str)``.  "
"This can be used to use another datatype or parser for JSON integers "
"(e.g. :class:`float`)."
msgstr ""
"*parse_int*\\가 지정되면, 디코딩될 모든 JSON int의 문자열로 호출됩니다. 기본적으로 이것은 "
"``int(num_str)``\\와 동등합니다. JSON 정수에 대해 다른 데이터형이나 구문 분석기를 사용하고자 할 때 사용될 수 "
"있습니다 (예를 들어 :class:`float`)."

#: ../Doc/library/json.rst:247 ../Doc/library/json.rst:344
msgid ""
"*parse_constant*, if specified, will be called with one of the following "
"strings: ``'-Infinity'``, ``'Infinity'``, ``'NaN'``. This can be used to "
"raise an exception if invalid JSON numbers are encountered."
msgstr ""
"*parse_constant*\\가 지정되면, 다음과 같은 문자열 중 하나로 호출됩니다: ``'-Infinity'``, "
"``'Infinity'``, ``'NaN'``. 잘못된 JSON 숫자를 만날 때 예외를 발생시키는 데 사용할 수 있습니다."

#: ../Doc/library/json.rst:252
msgid "*parse_constant* doesn't get called on 'null', 'true', 'false' anymore."
msgstr "*parse_constant*\\는 더는 'null', 'true', 'false'에 대해 호출되지 않습니다."

#: ../Doc/library/json.rst:255
msgid ""
"To use a custom :class:`JSONDecoder` subclass, specify it with the "
"``cls`` kwarg; otherwise :class:`JSONDecoder` is used.  Additional "
"keyword arguments will be passed to the constructor of the class."
msgstr ""
"사용자 정의 :class:`JSONDecoder` 서브 클래스를 사용하려면, ``cls`` 키워드 인자로 지정하십시오; 그렇지 "
"않으면 :class:`JSONDecoder`\\가 사용됩니다. 추가 키워드 인자는 클래스 생성자에 전달됩니다."

#: ../Doc/library/json.rst:259 ../Doc/library/json.rst:278
#: ../Doc/library/json.rst:354
msgid ""
"If the data being deserialized is not a valid JSON document, a "
":exc:`JSONDecodeError` will be raised."
msgstr "역 직렬화되는 데이터가 유효한 JSON 문서가 아니면, :exc:`JSONDecodeError`\\가 발생합니다."

#: ../Doc/library/json.rst:265
msgid ""
"*fp* can now be a :term:`binary file`. The input encoding should be "
"UTF-8, UTF-16 or UTF-32."
msgstr ""
"*fp*\\는 이제 :term:`바이너리 파일 <binary file>`\\이 될 수 있습니다. 입력 인코딩은 UTF-8, "
"UTF-16 또는 UTF-32 여야 합니다."

#: ../Doc/library/json.rst:271
msgid ""
"Deserialize *s* (a :class:`str`, :class:`bytes` or :class:`bytearray` "
"instance containing a JSON document) to a Python object using this "
":ref:`conversion table <json-to-py-table>`."
msgstr ""
"이 :ref:`변환표 <json-to-py-table>`\\를 사용하여 *s*\\(JSON 문서를 포함하는 :class:`str`,"
" :class:`bytes` 또는 :class:`bytearray` 인스턴스)를 파이썬 객체로 역 직렬화합니다."

#: ../Doc/library/json.rst:275
msgid ""
"The other arguments have the same meaning as in :func:`load`, except "
"*encoding* which is ignored and deprecated."
msgstr "무시되고 폐지된 *encoding*\\을 제외하고는, 다른 인자는 :func:`load`\\와 같은 의미를 가집니다."

#: ../Doc/library/json.rst:281
msgid ""
"*s* can now be of type :class:`bytes` or :class:`bytearray`. The input "
"encoding should be UTF-8, UTF-16 or UTF-32."
msgstr ""
"*s*\\는 이제 :class:`bytes`\\나 :class:`bytearray` 형일 수 있습니다. 입력 인코딩은 UTF-8, "
"UTF-16 또는 UTF-32 여야 합니다."

#: ../Doc/library/json.rst:287
msgid "Encoders and Decoders"
msgstr "인코더와 디코더"

#: ../Doc/library/json.rst:291
msgid "Simple JSON decoder."
msgstr "간단한 JSON 디코더."

#: ../Doc/library/json.rst:293
msgid "Performs the following translations in decoding by default:"
msgstr "기본적으로 디코딩할 때 다음과 같은 변환을 수행합니다:"

#: ../Doc/library/json.rst:298 ../Doc/library/json.rst:387
msgid "JSON"
msgstr "JSON"

#: ../Doc/library/json.rst:298 ../Doc/library/json.rst:387
msgid "Python"
msgstr "파이썬"

#: ../Doc/library/json.rst:300 ../Doc/library/json.rst:389
msgid "object"
msgstr "오브젝트(object)"

#: ../Doc/library/json.rst:300 ../Doc/library/json.rst:389
msgid "dict"
msgstr "dict"

#: ../Doc/library/json.rst:302 ../Doc/library/json.rst:391
msgid "array"
msgstr "배열(array)"

#: ../Doc/library/json.rst:302
msgid "list"
msgstr "list"

#: ../Doc/library/json.rst:304 ../Doc/library/json.rst:393
msgid "string"
msgstr "문자열(string)"

#: ../Doc/library/json.rst:304 ../Doc/library/json.rst:393
msgid "str"
msgstr "str"

#: ../Doc/library/json.rst:306
msgid "number (int)"
msgstr "숫자 (정수)"

#: ../Doc/library/json.rst:306
msgid "int"
msgstr "int"

#: ../Doc/library/json.rst:308
msgid "number (real)"
msgstr "숫자 (실수)"

#: ../Doc/library/json.rst:308
msgid "float"
msgstr "float"

#: ../Doc/library/json.rst:310 ../Doc/library/json.rst:397
msgid "true"
msgstr "true"

#: ../Doc/library/json.rst:310 ../Doc/library/json.rst:397
msgid "True"
msgstr "True"

#: ../Doc/library/json.rst:312 ../Doc/library/json.rst:399
msgid "false"
msgstr "false"

#: ../Doc/library/json.rst:312 ../Doc/library/json.rst:399
msgid "False"
msgstr "False"

#: ../Doc/library/json.rst:314 ../Doc/library/json.rst:401
msgid "null"
msgstr "null"

#: ../Doc/library/json.rst:314 ../Doc/library/json.rst:401
msgid "None"
msgstr "None"

#: ../Doc/library/json.rst:317
msgid ""
"It also understands ``NaN``, ``Infinity``, and ``-Infinity`` as their "
"corresponding ``float`` values, which is outside the JSON spec."
msgstr ""
"또한, ``NaN``, ``Infinity`` 및 ``-Infinity``\\를 해당 ``float`` 값으로 이해합니다. 이 값은"
" JSON 명세에 속하지 않습니다."

#: ../Doc/library/json.rst:320
msgid ""
"*object_hook*, if specified, will be called with the result of every JSON"
" object decoded and its return value will be used in place of the given "
":class:`dict`.  This can be used to provide custom deserializations (e.g."
" to support JSON-RPC class hinting)."
msgstr ""
"*object_hook*\\이 지정되면, 모든 JSON 오브젝트의 디코딩된 결과로 호출되며, 반환 값을 주어진 "
":class:`dict` 대신 사용합니다. 사용자 정의 역 직렬화를 제공하는 데 사용할 수 있습니다 (예를 들어, JSON-RPC "
"클래스 힌팅을 지원하기 위해)."

#: ../Doc/library/json.rst:325
msgid ""
"*object_pairs_hook*, if specified will be called with the result of every"
" JSON object decoded with an ordered list of pairs.  The return value of "
"*object_pairs_hook* will be used instead of the :class:`dict`.  This "
"feature can be used to implement custom decoders.  If *object_hook* is "
"also defined, the *object_pairs_hook* takes priority."
msgstr ""
"*object_pairs_hook*\\이 지정되면 모든 오브젝트 리터럴의 쌍의 순서 있는 목록으로 디코딩된 결과로 호출됩니다. "
":class:`dict` 대신 *object_pairs_hook*\\의 반환 값이 사용됩니다. 이 기능은 사용자 정의 디코더를 "
"구현하는 데 사용할 수 있습니다. *object_hook*\\도 정의되어 있으면, *object_pairs_hook*\\이 "
"우선순위를 갖습니다."

#: ../Doc/library/json.rst:349
msgid ""
"If *strict* is false (``True`` is the default), then control characters "
"will be allowed inside strings.  Control characters in this context are "
"those with character codes in the 0--31 range, including ``'\\t'`` (tab),"
" ``'\\n'``, ``'\\r'`` and ``'\\0'``."
msgstr ""
"*strict*\\가 거짓이면 (``True``\\가 기본값입니다), 문자열 안에 제어 문자가 허용됩니다. 이 문맥에서 제어 문자는"
" 0--31 범위의 문자 코드를 가진 것들인데, ``'\\t'`` (탭), ``'\\n'``, ``'\\r'`` 및 "
"``'\\0'``\\을 포함합니다."

#: ../Doc/library/json.rst:357 ../Doc/library/json.rst:459
msgid "All parameters are now :ref:`keyword-only <keyword-only_parameter>`."
msgstr "모든 매개 변수가 이제 :ref:`키워드-전용 <keyword-only_parameter>`\\입니다."

#: ../Doc/library/json.rst:362
msgid ""
"Return the Python representation of *s* (a :class:`str` instance "
"containing a JSON document)."
msgstr "*s*\\(JSON 문서가 포함된 :class:`str` 인스턴스)의 파이썬 표현을 반환합니다."

#: ../Doc/library/json.rst:365
msgid ""
":exc:`JSONDecodeError` will be raised if the given JSON document is not "
"valid."
msgstr "주어진 JSON 문서가 유효하지 않으면 :exc:`JSONDecodeError`\\가 발생합니다."

#: ../Doc/library/json.rst:370
msgid ""
"Decode a JSON document from *s* (a :class:`str` beginning with a JSON "
"document) and return a 2-tuple of the Python representation and the index"
" in *s* where the document ended."
msgstr ""
"*s*\\(JSON 문서로 시작하는 :class:`str`)에서 JSON 문서를 디코딩하고, 파이썬 표현과 문서가 끝난 "
"*s*\\에서의 인덱스로 구성된 2-튜플을 반환합니다."

#: ../Doc/library/json.rst:374
msgid ""
"This can be used to decode a JSON document from a string that may have "
"extraneous data at the end."
msgstr "끝에 여분의 데이터가 있을 수 있는 문자열에서 JSON 문서를 디코딩하는 데 사용할 수 있습니다."

#: ../Doc/library/json.rst:380
msgid "Extensible JSON encoder for Python data structures."
msgstr "파이썬 데이터 구조를 위한 확장 가능한 JSON 인코더"

#: ../Doc/library/json.rst:382
msgid "Supports the following objects and types by default:"
msgstr "기본적으로 다음 객체와 형을 지원합니다.:"

#: ../Doc/library/json.rst:391
msgid "list, tuple"
msgstr "list, tuple"

#: ../Doc/library/json.rst:395
msgid "int, float, int- & float-derived Enums"
msgstr "int, float, int와 float에서 파생된 열거형"

#: ../Doc/library/json.rst:395
msgid "number"
msgstr "숫자(number)"

#: ../Doc/library/json.rst:404
msgid "Added support for int- and float-derived Enum classes."
msgstr "int와 float 파생 Enum 클래스에 대한 지원이 추가되었습니다."

#: ../Doc/library/json.rst:407
msgid ""
"To extend this to recognize other objects, subclass and implement a "
":meth:`default` method with another method that returns a serializable "
"object for ``o`` if possible, otherwise it should call the superclass "
"implementation (to raise :exc:`TypeError`)."
msgstr ""
"다른 객체를 인식하도록 확장하려면, 서브 클래스를 만들고, 가능하면 ``o``\\에 대한 직렬화 가능 객체를 반환하고, 그렇지 "
"않으면 (:exc:`TypeError`\\를 발생시키기 위해) 슈퍼 클래스 구현을 호출하는 다른 메서드로 "
":meth:`default` 메서드를 구현합니다."

#: ../Doc/library/json.rst:412
msgid ""
"If *skipkeys* is false (the default), then it is a :exc:`TypeError` to "
"attempt encoding of keys that are not :class:`str`, :class:`int`, "
":class:`float` or ``None``.  If *skipkeys* is true, such items are simply"
" skipped."
msgstr ""
"*skipkeys*\\가 거짓(기본값)이면, :class:`str`, :class:`int`, :class:`float` 또는 "
"``None``\\이 아닌 키의 인코딩을 시도하는 것은 :exc:`TypeError`\\입니다. *skipkeys*\\가 참이면 "
"이러한 항목은 단순히 건너뜁니다."

#: ../Doc/library/json.rst:421
msgid ""
"If *check_circular* is true (the default), then lists, dicts, and custom "
"encoded objects will be checked for circular references during encoding "
"to prevent an infinite recursion (which would cause an "
":exc:`OverflowError`). Otherwise, no such check takes place."
msgstr ""
"*check_circular*\\가 참(기본값)이면, 리스트, 딕셔너리 및 사용자 정의 객체는 무한 재귀 "
"(:exc:`OverflowError`\\를 유발할 수 있습니다)를 방지하기 위해 인코딩 중에 순환 참조를 검사합니다. 그렇지 "
"않으면, 그러한 검사가 수행되지 않습니다."

#: ../Doc/library/json.rst:426
msgid ""
"If *allow_nan* is true (the default), then ``NaN``, ``Infinity``, and "
"``-Infinity`` will be encoded as such.  This behavior is not JSON "
"specification compliant, but is consistent with most JavaScript based "
"encoders and decoders.  Otherwise, it will be a :exc:`ValueError` to "
"encode such floats."
msgstr ""
"*allow_nan*\\이 참(기본값)이면, ``NaN``, ``Infinity`` 및 ``-Infinity``\\는 그 자체로 "
"인코딩됩니다. 이 동작은 JSON 사양을 따르지 않지만, 대부분의 JavaScript 기반 인코더 및 디코더와 일치합니다. 그렇지 "
"않으면, 그러한 float를 인코딩하는 것은 :exc:`ValueError`\\가 됩니다."

#: ../Doc/library/json.rst:432
msgid ""
"If *sort_keys* is true (default: ``False``), then the output of "
"dictionaries will be sorted by key; this is useful for regression tests "
"to ensure that JSON serializations can be compared on a day-to-day basis."
msgstr ""
"*sort_keys*\\가 참(기본값: ``False``)이면, 딕셔너리의 출력이 키로 정렬됩니다; JSON 직렬화를 이전과 비교할"
" 수 있도록 해서 회귀 테스트에 유용합니다."

#: ../Doc/library/json.rst:465
msgid ""
"Implement this method in a subclass such that it returns a serializable "
"object for *o*, or calls the base implementation (to raise a "
":exc:`TypeError`)."
msgstr ""
"*o*\\의 직렬화 가능 객체를 반환하거나 (:exc:`TypeError`\\를 발생시키기 위해서) 베이스 구현을 호출하도록 세비 "
"클래스에 이 메서드를 구현하십시오."

#: ../Doc/library/json.rst:469
msgid ""
"For example, to support arbitrary iterators, you could implement default "
"like this::"
msgstr "예를 들어, 임의의 이터레이터를 지원하려면, 다음과 같이 default를 구현할 수 있습니다::"

#: ../Doc/library/json.rst:485
msgid ""
"Return a JSON string representation of a Python data structure, *o*.  For"
" example::"
msgstr "파이썬 데이터 구조 *o*\\의 JSON 문자열 표현을 반환합니다. 예를 들면::"

#: ../Doc/library/json.rst:494
msgid ""
"Encode the given object, *o*, and yield each string representation as "
"available.  For example::"
msgstr "주어진 객체 *o*\\를 인코딩하고, 준비될 때마다 각 문자열 표현을 산출(yield)합니다. 예를 들면::"

#: ../Doc/library/json.rst:502
msgid "Exceptions"
msgstr "예외"

#: ../Doc/library/json.rst:506
msgid "Subclass of :exc:`ValueError` with the following additional attributes:"
msgstr "다음 추가 어트리뷰트가 있는 :exc:`ValueError`\\의 서브 클래스:"

#: ../Doc/library/json.rst:510
msgid "The unformatted error message."
msgstr "형식 없는 에러 메시지."

#: ../Doc/library/json.rst:514
msgid "The JSON document being parsed."
msgstr "구문 분석 중인 JSON 문서."

#: ../Doc/library/json.rst:518
msgid "The start index of *doc* where parsing failed."
msgstr "구문 분석에 실패한 위치의 시작 부분을 나타내는 *doc*\\의 인덱스."

#: ../Doc/library/json.rst:522
msgid "The line corresponding to *pos*."
msgstr "*pos*\\에 해당하는 줄."

#: ../Doc/library/json.rst:526
msgid "The column corresponding to *pos*."
msgstr "*pos*\\에 해당하는 열."

#: ../Doc/library/json.rst:532
msgid "Standard Compliance and Interoperability"
msgstr "표준 준수와 상호 운용성"

#: ../Doc/library/json.rst:534
msgid ""
"The JSON format is specified by :rfc:`7159` and by `ECMA-404 <http://www"
".ecma-international.org/publications/standards/Ecma-404.htm>`_. This "
"section details this module's level of compliance with the RFC. For "
"simplicity, :class:`JSONEncoder` and :class:`JSONDecoder` subclasses, and"
" parameters other than those explicitly mentioned, are not considered."
msgstr ""
"JSON 형식은 :rfc:`7159`\\와 `ECMA-404 <http://www.ecma-"
"international.org/publications/standards/Ecma-404.htm>`_\\에 의해 지정됩니다. 이 "
"절에서는 이 모듈의 RFC 준수 수준에 대해 자세히 설명합니다. 단순화를 위해, :class:`JSONEncoder` 및 "
":class:`JSONDecoder` 서브 클래스와 명시적으로 언급되지 않은 매개 변수는 고려되지 않습니다."

#: ../Doc/library/json.rst:540
msgid ""
"This module does not comply with the RFC in a strict fashion, "
"implementing some extensions that are valid JavaScript but not valid "
"JSON.  In particular:"
msgstr ""
"유효한 JavaScript이지만 유효한 JSON이 아닌 확장을 구현함으로써, 이 모듈은 엄격한 방식으로 RFC를 준수하지는 "
"않습니다. 특히:"

#: ../Doc/library/json.rst:543
msgid "Infinite and NaN number values are accepted and output;"
msgstr "무한대와 NaN 숫자 값이 받아들여지고 출력됩니다;"

#: ../Doc/library/json.rst:544
msgid ""
"Repeated names within an object are accepted, and only the value of the "
"last name-value pair is used."
msgstr "오브젝트 내에서 반복되는 이름이 허용되고, 마지막 이름-값 쌍의 값만 사용됩니다."

#: ../Doc/library/json.rst:547
msgid ""
"Since the RFC permits RFC-compliant parsers to accept input texts that "
"are not RFC-compliant, this module's deserializer is technically RFC-"
"compliant under default settings."
msgstr ""
"RFC가 RFC를 준수하는 구문 분석기가 RFC를 준수하지 않는 입력 텍스트를 받아들이도록 허용하기 때문에, 이 모듈의 역 "
"직렬화기는 기본 설정에서 기술적으로 RFC를 준수합니다."

#: ../Doc/library/json.rst:552
msgid "Character Encodings"
msgstr "문자 인코딩"

#: ../Doc/library/json.rst:554
msgid ""
"The RFC requires that JSON be represented using either UTF-8, UTF-16, or "
"UTF-32, with UTF-8 being the recommended default for maximum "
"interoperability."
msgstr ""
"RFC는 UTF-8, UTF-16 또는 UTF-32를 사용하여 JSON을 표현할 것을 요구하고, 최대 상호 운용성을 위해 권장되는 "
"기본값은 UTF-8입니다."

#: ../Doc/library/json.rst:557
msgid ""
"As permitted, though not required, by the RFC, this module's serializer "
"sets *ensure_ascii=True* by default, thus escaping the output so that the"
" resulting strings only contain ASCII characters."
msgstr ""
"RFC에 의해 요구되는 것은 아니지만 허용되기 때문에, 이 모듈의 직렬화기는 기본적으로 *ensure_ascii=True*\\를 "
"설정하므로, 결과 문자열에 ASCII 문자만 포함되도록 출력을 이스케이핑 합니다."

#: ../Doc/library/json.rst:561
msgid ""
"Other than the *ensure_ascii* parameter, this module is defined strictly "
"in terms of conversion between Python objects and :class:`Unicode strings"
" <str>`, and thus does not otherwise directly address the issue of "
"character encodings."
msgstr ""
"*ensure_ascii* 매개 변수 외에도, 이 모듈은 파이썬 객체와 :class:`유니코드 문자열 <str>` 사이의 변환으로 "
"엄격하게 정의되어 있으므로, 문자 인코딩 문제를 직접 다루지 않습니다."

#: ../Doc/library/json.rst:566
msgid ""
"The RFC prohibits adding a byte order mark (BOM) to the start of a JSON "
"text, and this module's serializer does not add a BOM to its output. The "
"RFC permits, but does not require, JSON deserializers to ignore an "
"initial BOM in their input.  This module's deserializer raises a "
":exc:`ValueError` when an initial BOM is present."
msgstr ""
"RFC는 JSON 텍스트의 시작 부분에 바이트 순서 표시(BOM)를 추가하는 것을 금지하고 있으며, 이 모듈의 직렬화기는 BOM을 "
"출력에 추가하지 않습니다. RFC는 JSON 역 직렬화기가 입력에서 초기 BOM을 무시하는 것을 허용하지만 요구하지는 않습니다. 이"
" 모듈의 역 직렬화기는 초기 BOM이 있을 때 :exc:`ValueError`\\를 발생시킵니다."

#: ../Doc/library/json.rst:572
msgid ""
"The RFC does not explicitly forbid JSON strings which contain byte "
"sequences that don't correspond to valid Unicode characters (e.g. "
"unpaired UTF-16 surrogates), but it does note that they may cause "
"interoperability problems. By default, this module accepts and outputs "
"(when present in the original :class:`str`) code points for such "
"sequences."
msgstr ""
"RFC는 유효한 유니코드 문자에 해당하지 않는 바이트 시퀀스(예를 들어, 쌍을 이루지 않은 UTF-16 대리 코드(unpaired "
"UTF-16 surrogates))가 포함된 JSON 문자열을 명시적으로 금지하지 않지만, 상호 운용성 문제를 일으킬 수 있다고 "
"지적하고 있습니다. 기본적으로, 이 모듈은 이러한 시퀀스의 코드 포인트를 받아들이고 (원래 :class:`str`\\에 있을 때) "
"출력합니다."

#: ../Doc/library/json.rst:580
msgid "Infinite and NaN Number Values"
msgstr "무한대와 NaN 숫자 값"

#: ../Doc/library/json.rst:582
msgid ""
"The RFC does not permit the representation of infinite or NaN number "
"values. Despite that, by default, this module accepts and outputs "
"``Infinity``, ``-Infinity``, and ``NaN`` as if they were valid JSON "
"number literal values::"
msgstr ""
"RFC는 무한대나 NaN 숫자 값의 표현을 허용하지 않습니다. 그런데도, 기본적으로, 이 모듈은 유효한 JSON 숫자 리터럴 값인 "
"것처럼 ``Infinity``, ``-Infinity`` 및 ``NaN``\\을 받아들이고 출력합니다::"

#: ../Doc/library/json.rst:597
msgid ""
"In the serializer, the *allow_nan* parameter can be used to alter this "
"behavior.  In the deserializer, the *parse_constant* parameter can be "
"used to alter this behavior."
msgstr ""
"직렬화기에서, *allow_nan* 매개 변수를 사용하여 이 동작을 변경할 수 있습니다. 역 직렬화기에서, "
"*parse_constant* 매개 변수를 사용하여 이 동작을 변경할 수 있습니다."

#: ../Doc/library/json.rst:603
msgid "Repeated Names Within an Object"
msgstr "오브젝트 내에서 반복된 이름"

#: ../Doc/library/json.rst:605
msgid ""
"The RFC specifies that the names within a JSON object should be unique, "
"but does not mandate how repeated names in JSON objects should be "
"handled.  By default, this module does not raise an exception; instead, "
"it ignores all but the last name-value pair for a given name::"
msgstr ""
"RFC는 JSON 오브젝트 내에서 이름이 고유해야 한다고 지정하지만, JSON 오브젝트 내에서 반복되는 이름을 처리하는 방법을 "
"지정하지는 않습니다. 기본적으로, 이 모듈은 예외를 발생시키지 않습니다; 대신, 주어진 이름에 대한 마지막 이름-값 쌍을 제외한 "
"모든 것을 무시합니다::"

#: ../Doc/library/json.rst:614
msgid "The *object_pairs_hook* parameter can be used to alter this behavior."
msgstr "*object_pairs_hook* 매개 변수는 이 동작을 변경하는 데 사용할 수 있습니다."

#: ../Doc/library/json.rst:618
msgid "Top-level Non-Object, Non-Array Values"
msgstr "오브젝트나 배열이 아닌 최상윗값"

#: ../Doc/library/json.rst:620
msgid ""
"The old version of JSON specified by the obsolete :rfc:`4627` required "
"that the top-level value of a JSON text must be either a JSON object or "
"array (Python :class:`dict` or :class:`list`), and could not be a JSON "
"null, boolean, number, or string value.  :rfc:`7159` removed that "
"restriction, and this module does not and has never implemented that "
"restriction in either its serializer or its deserializer."
msgstr ""
"폐지된 :rfc:`4627`\\에 의해 지정된 이전 버전의 JSON은 JSON 텍스트의 최상윗값이 JSON 오브젝트나 배열(파이썬 "
":class:`dict`\\나 :class:`list`)이어야 하고, JSON null, 불리언, 숫자 또는 문자열 값이 될 수 "
"없다고 요구합니다. :rfc:`7159`\\는 그 제한을 제거했으며, 이 모듈은 직렬화기와 역 직렬화기에서 이러한 제한을 구현하지 "
"않으며, 그런 적도 없습니다."

#: ../Doc/library/json.rst:627
msgid ""
"Regardless, for maximum interoperability, you may wish to voluntarily "
"adhere to the restriction yourself."
msgstr "이와 관계없이, 최대한의 상호 운용성을 위해, 여러분은 자발적으로 제한을 준수하기를 원할 수 있습니다."

#: ../Doc/library/json.rst:632
msgid "Implementation Limitations"
msgstr "구현 제약 사항"

#: ../Doc/library/json.rst:634
msgid "Some JSON deserializer implementations may set limits on:"
msgstr "일부 JSON 역 직렬화기 구현은 다음과 같은 것들에 대한 제한을 설정할 수 있습니다:"

#: ../Doc/library/json.rst:636
msgid "the size of accepted JSON texts"
msgstr "받아들인 JSON 텍스트의 크기"

#: ../Doc/library/json.rst:637
msgid "the maximum level of nesting of JSON objects and arrays"
msgstr "JSON 오브젝트와 배열의 최대 중첩 수준"

#: ../Doc/library/json.rst:638
msgid "the range and precision of JSON numbers"
msgstr "JSON 숫자의 범위와 정밀도"

#: ../Doc/library/json.rst:639
msgid "the content and maximum length of JSON strings"
msgstr "JSON 문자열의 내용과 최대 길이"

#: ../Doc/library/json.rst:641
msgid ""
"This module does not impose any such limits beyond those of the relevant "
"Python datatypes themselves or the Python interpreter itself."
msgstr "이 모듈은 관련 파이썬 데이터형 자체나 파이썬 인터프리터 자체의 한계 외에는 어떤 제한도 가하지 않습니다."

#: ../Doc/library/json.rst:644
msgid ""
"When serializing to JSON, beware any such limitations in applications "
"that may consume your JSON.  In particular, it is common for JSON numbers"
" to be deserialized into IEEE 754 double precision numbers and thus "
"subject to that representation's range and precision limitations.  This "
"is especially relevant when serializing Python :class:`int` values of "
"extremely large magnitude, or when serializing instances of \"exotic\" "
"numerical types such as :class:`decimal.Decimal`."
msgstr ""
"JSON으로 직렬화할 때, 여러분의 JSON을 사용할 응용 프로그램에 있는 이러한 제한 사항에 주의하십시오. 특히, JSON 숫자가"
" IEEE 754 배정도 숫자로 역 직렬화되는 것이 일반적이고, 그래서 그 표현의 범위와 정밀도 제한이 적용됩니다. 이것은 매우 큰"
" 규모의 파이썬 :class:`int` 값을 직렬화하거나, :class:`decimal.Decimal`\\과 같은 \"색다른\" "
"숫자 형의 인스턴스를 직렬화할 때 특히 중요합니다."

#: ../Doc/library/json.rst:655
msgid "Command Line Interface"
msgstr "명령 줄 인터페이스"

#: ../Doc/library/json.rst:660
msgid "**Source code:** :source:`Lib/json/tool.py`"
msgstr "**소스 코드:** :source:`Lib/json/tool.py`"

#: ../Doc/library/json.rst:664
msgid ""
"The :mod:`json.tool` module provides a simple command line interface to "
"validate and pretty-print JSON objects."
msgstr ":mod:`json.tool` 모듈은 JSON 객체의 유효성을 검사하고 예쁘게 인쇄하는 간단한 명령 줄 인터페이스를 제공합니다."

#: ../Doc/library/json.rst:667
msgid ""
"If the optional ``infile`` and ``outfile`` arguments are not specified, "
":attr:`sys.stdin` and :attr:`sys.stdout` will be used respectively:"
msgstr ""
"선택적 ``infile``\\과 ``outfile`` 인자가 지정되지 않으면, 각각 :attr:`sys.stdin`\\과 "
":attr:`sys.stdout`\\이 사용됩니다:"

#: ../Doc/library/json.rst:679
msgid ""
"The output is now in the same order as the input. Use the :option"
":`--sort-keys` option to sort the output of dictionaries alphabetically "
"by key."
msgstr ""
"출력은 이제 입력과 같은 순서입니다. 딕셔너리의 출력을 키에 대해 알파벳 순으로 정렬하려면 :option:`--sort-keys` "
"옵션을 사용하십시오."

#: ../Doc/library/json.rst:685
msgid "Command line options"
msgstr "명령 줄 옵션"

#: ../Doc/library/json.rst:689
msgid "The JSON file to be validated or pretty-printed:"
msgstr "유효성을 검사하거나 예쁘게 인쇄할 JSON 파일:"

#: ../Doc/library/json.rst:705
msgid "If *infile* is not specified, read from :attr:`sys.stdin`."
msgstr "*infile*\\이 지정되지 않으면, :attr:`sys.stdin`\\에서 읽습니다."

#: ../Doc/library/json.rst:709
msgid ""
"Write the output of the *infile* to the given *outfile*. Otherwise, write"
" it to :attr:`sys.stdout`."
msgstr "*infile*\\의 출력을 지정된 *outfile*\\에 씁니다. 그렇지 않으면, :attr:`sys.stdout`\\에 씁니다."

#: ../Doc/library/json.rst:714
msgid "Sort the output of dictionaries alphabetically by key."
msgstr "딕셔너리의 출력을 키에 대해 알파벳 순으로 정렬합니다."

#: ../Doc/library/json.rst:720
msgid "Show the help message."
msgstr "도움말 메시지를 표시합니다."

#: ../Doc/library/json.rst:724
msgid "Footnotes"
msgstr "각주"

#: ../Doc/library/json.rst:725
msgid ""
"As noted in `the errata for RFC 7159 <https://www.rfc-"
"editor.org/errata_search.php?rfc=7159>`_, JSON permits literal U+2028 "
"(LINE SEPARATOR) and U+2029 (PARAGRAPH SEPARATOR) characters in strings, "
"whereas JavaScript (as of ECMAScript Edition 5.1) does not."
msgstr ""
"`the errata for RFC 7159 <https://www.rfc-"
"editor.org/errata_search.php?rfc=7159>`_\\에서 언급했듯이, JSON은 문자열에 "
"U+2028(LINE SEPARATOR)과 U+2029(PARAGRAPH SEPARATOR) 문자를 허용하지만, "
"JavaScript(ECMAScript Edition 5.1 기준)는 허용하지 않습니다."

#~ msgid "Using :mod:`json.tool` from the shell to validate and pretty-print::"
#~ msgstr ""

#~ msgid ""
#~ "If the optional ``infile`` and "
#~ "``outfile`` arguments are not specified, "
#~ ":attr:`sys.stdin` and :attr:`sys.stdout` will "
#~ "be used respectively::"
#~ msgstr ""

#~ msgid "The JSON file to be validated or pretty-printed::"
#~ msgstr ""

#~ msgid ""
#~ "*object_pairs_hook* is an optional function"
#~ " that will be called with the "
#~ "result of any object literal decoded "
#~ "with an ordered list of pairs.  "
#~ "The return value of *object_pairs_hook* "
#~ "will be used instead of the "
#~ ":class:`dict`.  This feature can be used"
#~ " to implement custom decoders that "
#~ "rely on the order that the key "
#~ "and value pairs are decoded (for "
#~ "example, :func:`collections.OrderedDict` will "
#~ "remember the order of insertion). If "
#~ "*object_hook* is also defined, the "
#~ "*object_pairs_hook* takes priority."
#~ msgstr ""

#~ msgid ""
#~ "*object_pairs_hook*, if specified will be "
#~ "called with the result of every "
#~ "JSON object decoded with an ordered "
#~ "list of pairs.  The return value "
#~ "of *object_pairs_hook* will be used "
#~ "instead of the :class:`dict`.  This "
#~ "feature can be used to implement "
#~ "custom decoders that rely on the "
#~ "order that the key and value pairs"
#~ " are decoded (for example, "
#~ ":func:`collections.OrderedDict` will remember the"
#~ " order of insertion). If *object_hook* "
#~ "is also defined, the *object_pairs_hook* "
#~ "takes priority."
#~ msgstr ""

#~ msgid ""
#~ "Deserialize *fp* (a ``.read()``-supporting "
#~ ":term:`file-like object` containing a "
#~ "JSON document) to a Python object "
#~ "using this :ref:`conversion table <json-"
#~ "to-py-table>`."
#~ msgstr ""

