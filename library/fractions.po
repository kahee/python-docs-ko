# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-11-26 18:49+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dong-gweon Oh <flowdas@gmail.com>\n"
"Language-Team: Korean (https://python.flowdas.com)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"

#: ../Doc/library/fractions.rst:2
msgid ":mod:`fractions` --- Rational numbers"
msgstr ":mod:`fractions` --- 유리수"

#: ../Doc/library/fractions.rst:10
msgid "**Source code:** :source:`Lib/fractions.py`"
msgstr "**소스 코드:** :source:`Lib/fractions.py`"

#: ../Doc/library/fractions.rst:14
msgid ""
"The :mod:`fractions` module provides support for rational number "
"arithmetic."
msgstr ":mod:`fractions` 모듈은 유리수 산술을 지원합니다."

#: ../Doc/library/fractions.rst:17
msgid ""
"A Fraction instance can be constructed from a pair of integers, from "
"another rational number, or from a string."
msgstr "Fraction 인스턴스는 한 쌍의 정수, 다른 유리수 또는 문자열로 만들 수 있습니다."

#: ../Doc/library/fractions.rst:26
msgid ""
"The first version requires that *numerator* and *denominator* are "
"instances of :class:`numbers.Rational` and returns a new "
":class:`Fraction` instance with value ``numerator/denominator``. If "
"*denominator* is :const:`0`, it raises a :exc:`ZeroDivisionError`. The "
"second version requires that *other_fraction* is an instance of "
":class:`numbers.Rational` and returns a :class:`Fraction` instance with "
"the same value.  The next two versions accept either a :class:`float` or "
"a :class:`decimal.Decimal` instance, and return a :class:`Fraction` "
"instance with exactly the same value.  Note that due to the usual issues "
"with binary floating-point (see :ref:`tut-fp-issues`), the argument to "
"``Fraction(1.1)`` is not exactly equal to 11/10, and so ``Fraction(1.1)``"
" does *not* return ``Fraction(11, 10)`` as one might expect. (But see the"
" documentation for the :meth:`limit_denominator` method below.) The last "
"version of the constructor expects a string or unicode instance. The "
"usual form for this instance is::"
msgstr ""
"첫 번째 버전에서는 *numerator* 와 *denominator*\\가 :class:`numbers.Rational`\\의 "
"인스턴스이고, ``numerator/denominator`` 값의 새 :class:`Fraction` 인스턴스를 반환합니다. "
"*denominator*\\가 :const:`0`\\이면, :exc:`ZeroDivisionError`\\를 발생시킵니다. 두 번째 "
"버전에서는 *other_fraction*\\이 :class:`numbers.Rational`\\의 인스턴스이고, 같은 값을 가진 "
":class:`Fraction` 인스턴스를 반환합니다. 다음 두 버전은 :class:`float` 나 "
":class:`decimal.Decimal` 인스턴스를 받아들이고, 정확히 같은 값의 :class:`Fraction` 인스턴스를 "
"반환합니다. 이진 부동 소수점(:ref:`tut-fp-issues` 참조)의 일반적인 문제로 인해, ``Fraction(1.1)``\\에"
" 대한 인자가 정확히 11/10이 아니므로, ``Fraction(1.1)``\\는 흔히 기대하듯이 ``Fraction(11, "
"10)``\\를 반환하지 *않습니다*. (그러나 아래의 :meth:`limit_denominator` 메서드에 대한 설명서를 "
"참조하십시오.) 생성자의 마지막 버전은 문자열이나 유니코드 인스턴스를 기대합니다. 이 인스턴스의 일반적인 형식은 다음과 같습니다::"

#: ../Doc/library/fractions.rst:43
msgid ""
"where the optional ``sign`` may be either '+' or '-' and ``numerator`` "
"and ``denominator`` (if present) are strings of decimal digits.  In "
"addition, any string that represents a finite value and is accepted by "
"the :class:`float` constructor is also accepted by the :class:`Fraction` "
"constructor.  In either form the input string may also have leading "
"and/or trailing whitespace. Here are some examples::"
msgstr ""
"이때, 선택적 ``sign``\\은 '+' 나 '-'일 수 있으며 ``numerator`` 와 ``denominator``\\(있다면)는"
" 십진수 문자열입니다. 또한, 유한한 값을 나타내고 :class:`float` 생성자에서 허용하는 모든 문자열은 "
":class:`Fraction` 생성자에서도 허용됩니다. 모든 형식에서, 입력 문자열에는 선행과/이나 후행 공백이 있을 수도 있습니다. "
"여기 예제가 있습니다::"

#: ../Doc/library/fractions.rst:77
msgid ""
"The :class:`Fraction` class inherits from the abstract base class "
":class:`numbers.Rational`, and implements all of the methods and "
"operations from that class.  :class:`Fraction` instances are hashable, "
"and should be treated as immutable.  In addition, :class:`Fraction` has "
"the following properties and methods:"
msgstr ""
":class:`Fraction` 클래스는 추상 베이스 클래스 :class:`numbers.Rational`\\를 상속하며, 그 클래스의 "
"모든 메서드와 연산을 구현합니다. :class:`Fraction` 인스턴스는 해시 가능하고, 불변으로 취급해야 합니다. 또한, "
":class:`Fraction`\\에는 다음과 같은 프로퍼티와 메서드가 있습니다:"

#: ../Doc/library/fractions.rst:83
msgid ""
"The :class:`Fraction` constructor now accepts :class:`float` and "
":class:`decimal.Decimal` instances."
msgstr ""
":class:`Fraction` 생성자는 이제 :class:`float`\\와 :class:`decimal.Decimal` 인스턴스를 "
"받아들입니다."

#: ../Doc/library/fractions.rst:90
msgid "Numerator of the Fraction in lowest term."
msgstr "기약 분수로 나타낼 때 Fraction의 분자."

#: ../Doc/library/fractions.rst:94
msgid "Denominator of the Fraction in lowest term."
msgstr "기약 분수로 나타낼 때 Fraction의 분모."

#: ../Doc/library/fractions.rst:99
msgid ""
"This class method constructs a :class:`Fraction` representing the exact "
"value of *flt*, which must be a :class:`float`. Beware that "
"``Fraction.from_float(0.3)`` is not the same value as ``Fraction(3, "
"10)``."
msgstr ""
"이 클래스 메서드는 :class:`float` *flt*\\의 정확한 값을 나타내는 :class:`Fraction`\\을 생성합니다. "
"``Fraction.from_float(0.3)``\\가 ``Fraction(3, 10)``\\와 같은 값이 아니라는 점에 유의하십시오."

#: ../Doc/library/fractions.rst:105
msgid ""
"From Python 3.2 onwards, you can also construct a :class:`Fraction` "
"instance directly from a :class:`float`."
msgstr ""
"파이썬 3.2 이상에서는, :class:`float`\\에서 직접 :class:`Fraction` 인스턴스를 생성할 수도 있습니다."

#: ../Doc/library/fractions.rst:111
msgid ""
"This class method constructs a :class:`Fraction` representing the exact "
"value of *dec*, which must be a :class:`decimal.Decimal` instance."
msgstr ""
"이 클래스 메서드는 :class:`decimal.Decimal` 인스턴스 *dec*\\의 정확한 값을 나타내는 "
":class:`Fraction`\\을 생성합니다."

#: ../Doc/library/fractions.rst:116
msgid ""
"From Python 3.2 onwards, you can also construct a :class:`Fraction` "
"instance directly from a :class:`decimal.Decimal` instance."
msgstr ""
"파이썬 3.2 이상에서는, :class:`decimal.Decimal` 인스턴스에서 직접 :class:`Fraction` 인스턴스를 "
"생성할 수도 있습니다."

#: ../Doc/library/fractions.rst:123
msgid ""
"Finds and returns the closest :class:`Fraction` to ``self`` that has "
"denominator at most max_denominator.  This method is useful for finding "
"rational approximations to a given floating-point number:"
msgstr ""
"분모가 최대 max_denominator인 ``self``\\에 가장 가까운 :class:`Fraction`\\을 찾아서 반환합니다. 이"
" 메서드는 주어진 부동 소수점 수에 대한 유리한 근사를 찾는 데 유용합니다:"

#: ../Doc/library/fractions.rst:131
msgid "or for recovering a rational number that's represented as a float:"
msgstr "또는 float로 표현된 유리수를 복구할 때 유용합니다:"

#: ../Doc/library/fractions.rst:144
msgid ""
"Returns the greatest :class:`int` ``<= self``.  This method can also be "
"accessed through the :func:`math.floor` function:"
msgstr ""
"가장 큰 :class:`int` ``<= self``\\를 반환합니다. 이 메서드는 :func:`math.floor` 함수를 통해 "
"액세스할 수도 있습니다:"

#: ../Doc/library/fractions.rst:154
msgid ""
"Returns the least :class:`int` ``>= self``.  This method can also be "
"accessed through the :func:`math.ceil` function."
msgstr ""
"가장 작은 :class:`int` ``>= self``\\를 반환합니다. 이 메서드는 :func:`math.ceil` 함수를 통해 "
"액세스할 수도 있습니다."

#: ../Doc/library/fractions.rst:161
msgid ""
"The first version returns the nearest :class:`int` to ``self``, rounding "
"half to even. The second version rounds ``self`` to the nearest multiple "
"of ``Fraction(1, 10**ndigits)`` (logically, if ``ndigits`` is negative), "
"again rounding half toward even.  This method can also be accessed "
"through the :func:`round` function."
msgstr ""
"첫 번째 버전은 ``self``\\에 가장 가까운 :class:`int`\\를 반환하는데, 절반은 짝수로 자리 올림 합니다. 두 번째 "
"버전은 ``self``\\를 가장 가까운 ``Fraction(1, 10**ndigits)``\\의 배수로 자리 올림 하는데 "
"(``ndigits``\\가 음수면 논리적으로), 역시 짝수로 자리 올림 합니다. 이 메서드는 :func:`round` 함수를 통해 "
"액세스할 수도 있습니다."

#: ../Doc/library/fractions.rst:170
msgid ""
"Return the greatest common divisor of the integers *a* and *b*.  If "
"either *a* or *b* is nonzero, then the absolute value of ``gcd(a, b)`` is"
" the largest integer that divides both *a* and *b*.  ``gcd(a,b)`` has the"
" same sign as *b* if *b* is nonzero; otherwise it takes the sign of *a*."
"  ``gcd(0, 0)`` returns ``0``."
msgstr ""
"정수 *a*\\와 *b*\\의 최대 공약수를 반환합니다. *a* 나 *b*\\가 0이 아니면, ``gcd(a, b)``\\의 절댓값은 "
"*a*\\와 *b*\\를 모두 나누는 가장 큰 정수입니다. *b*\\가 0이 아니면, ``gcd(a,b)``\\는 *b*\\와 같은 "
"부호를 가집니다; 그렇지 않으면 *a*\\의 부호를 취합니다. ``gcd(0, 0)``\\는 ``0``\\을 반환합니다."

#: ../Doc/library/fractions.rst:176
msgid "Use :func:`math.gcd` instead."
msgstr "대신 :func:`math.gcd`\\를 사용하십시오."

#: ../Doc/library/fractions.rst:182
msgid "Module :mod:`numbers`"
msgstr "모듈 :mod:`numbers`"

#: ../Doc/library/fractions.rst:183
msgid "The abstract base classes making up the numeric tower."
msgstr "숫자 계층을 구성하는 추상 베이스 클래스."
