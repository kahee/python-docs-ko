# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-12-25 10:27+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dong-gweon Oh <flowdas@gmail.com>\n"
"Language-Team: Korean (https://python.flowdas.com)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../Doc/c-api/dict.rst:6
msgid "Dictionary Objects"
msgstr "딕셔너리 객체"

#: ../Doc/c-api/dict.rst:13
msgid "This subtype of :c:type:`PyObject` represents a Python dictionary object."
msgstr "이 :c:type:`PyObject`\\의 서브 형은 파이썬 딕셔너리 객체를 나타냅니다."

#: ../Doc/c-api/dict.rst:18
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python dictionary "
"type.  This is the same object as :class:`dict` in the Python layer."
msgstr ""
"이 :c:type:`PyTypeObject` 인스턴스는 파이썬 딕셔너리 형을 나타냅니다. 이것은 파이썬 계층의 "
":class:`dict`\\와 같은 객체입니다."

#: ../Doc/c-api/dict.rst:24
msgid ""
"Return true if *p* is a dict object or an instance of a subtype of the "
"dict type."
msgstr "*p*\\가 dict 객체이거나 dict 형의 서브 형의 인스턴스면 참을 반환합니다."

#: ../Doc/c-api/dict.rst:30
msgid ""
"Return true if *p* is a dict object, but not an instance of a subtype of "
"the dict type."
msgstr "*p*\\가 dict 객체이지만, dict 형의 서브 형의 인스턴스는 아니면 참을 반환합니다."

#: ../Doc/c-api/dict.rst:36
msgid "Return a new empty dictionary, or *NULL* on failure."
msgstr "새로운 빈 딕셔너리를 반환하거나, 실패하면 *NULL*\\을 반환합니다."

#: ../Doc/c-api/dict.rst:41
msgid ""
"Return a :class:`types.MappingProxyType` object for a mapping which "
"enforces read-only behavior.  This is normally used to create a view to "
"prevent modification of the dictionary for non-dynamic class types."
msgstr ""
"읽기 전용 동작을 강제하는 매핑을 위한 :class:`types.MappingProxyType` 객체를 반환합니다. 이것은 일반적으로 비"
" 동적 클래스 형을 위한 딕셔너리의 수정을 방지하기 위해 뷰를 만드는 데 사용됩니다."

#: ../Doc/c-api/dict.rst:48
msgid "Empty an existing dictionary of all key-value pairs."
msgstr "기존 딕셔너리의 모든 키-값 쌍을 비웁니다."

#: ../Doc/c-api/dict.rst:53
msgid ""
"Determine if dictionary *p* contains *key*.  If an item in *p* is matches"
" *key*, return ``1``, otherwise return ``0``.  On error, return ``-1``. "
"This is equivalent to the Python expression ``key in p``."
msgstr ""
"딕셔너리 *p*\\에 *key*\\가 포함되어 있는지 확인합니다. *p*\\의 항목이 *key*\\와 일치하면 ``1``\\을 반환하고,"
" 그렇지 않으면 ``0``\\을 반환합니다. 에러면 ``-1``\\을 반환합니다. 이는 파이썬 표현식 ``key in p``\\와 "
"동등합니다."

#: ../Doc/c-api/dict.rst:60
msgid "Return a new dictionary that contains the same key-value pairs as *p*."
msgstr "*p*\\와 같은 키-값 쌍을 포함하는 새 딕셔너리를 반환합니다."

#: ../Doc/c-api/dict.rst:65
msgid ""
"Insert *value* into the dictionary *p* with a key of *key*.  *key* must "
"be :term:`hashable`; if it isn't, :exc:`TypeError` will be raised. Return"
" ``0`` on success or ``-1`` on failure."
msgstr ""
"딕셔너리 *p*\\에 *value*\\를 *key* 키로 삽입합니다. *key*\\는 :term:`해시 가능 <hashable>`\\해야"
" 합니다. 그렇지 않으면 :exc:`TypeError`\\가 발생합니다. 성공하면 ``0``\\을, 실패하면 ``-1``\\을 "
"반환합니다."

#: ../Doc/c-api/dict.rst:74
msgid ""
"Insert *value* into the dictionary *p* using *key* as a key. *key* should"
" be a :c:type:`const char\\*`.  The key object is created using "
"``PyUnicode_FromString(key)``.  Return ``0`` on success or ``-1`` on "
"failure."
msgstr ""
"*key*\\를 키로 사용하여 딕셔너리 *p*\\에 *value*\\를 삽입합니다. *key*\\는 :c:type:`const "
"char\\*`\\여야 합니다. 키 객체는 ``PyUnicode_FromString(key)``\\를 사용하여 만듭니다. 성공하면 "
"``0``\\을, 실패하면 ``-1``\\을 반환합니다."

#: ../Doc/c-api/dict.rst:82
msgid ""
"Remove the entry in dictionary *p* with key *key*. *key* must be "
"hashable; if it isn't, :exc:`TypeError` is raised.  Return ``0`` on "
"success or ``-1`` on failure."
msgstr ""
"딕셔너리 *p*\\에서 키가 *key*\\인 항목을 제거합니다. *key*\\는 해시 가능해야 합니다. 그렇지 않으면 "
":exc:`TypeError`\\가 발생합니다. 성공하면 ``0``\\을, 실패하면 ``-1``\\을 반환합니다."

#: ../Doc/c-api/dict.rst:89
msgid ""
"Remove the entry in dictionary *p* which has a key specified by the "
"string *key*.  Return ``0`` on success or ``-1`` on failure."
msgstr ""
"딕셔너리 *p*\\에서 문자열 *key*\\로 지정된 키의 항목을 제거합니다. 성공하면 ``0``\\을, 실패하면 ``-1``\\을 "
"반환합니다."

#: ../Doc/c-api/dict.rst:95
msgid ""
"Return the object from dictionary *p* which has a key *key*.  Return "
"*NULL* if the key *key* is not present, but *without* setting an "
"exception."
msgstr ""
"딕셔너리 *p*\\에서 키가 *key*\\인 객체를 반환합니다. *key* 키가 없으면 예외를 설정하지 *않고* *NULL*\\을 "
"반환합니다."

#: ../Doc/c-api/dict.rst:98
msgid ""
"Note that exceptions which occur while calling :meth:`__hash__` and "
":meth:`__eq__` methods will get suppressed. To get error reporting use "
":c:func:`PyDict_GetItemWithError()` instead."
msgstr ""
":meth:`__hash__`\\와 :meth:`__eq__` 메서드를 호출하는 동안 발생하는 예외는 억제됩니다. 에러 보고를 얻으려면 "
"대신 :c:func:`PyDict_GetItemWithError()`\\를 사용하십시오."

#: ../Doc/c-api/dict.rst:105
msgid ""
"Variant of :c:func:`PyDict_GetItem` that does not suppress exceptions. "
"Return *NULL* **with** an exception set if an exception occurred.  Return"
" *NULL* **without** an exception set if the key wasn't present."
msgstr ""
"예외를 억제하지 않는 :c:func:`PyDict_GetItem`\\의 변형입니다. 예외가 발생하면 예외를 **설정하고** "
"*NULL*\\을 반환합니다. 키가 없으면 예외를 설정하지 **않고** *NULL*\\을 반환합니다."

#: ../Doc/c-api/dict.rst:113
msgid ""
"This is the same as :c:func:`PyDict_GetItem`, but *key* is specified as a"
" :c:type:`const char\\*`, rather than a :c:type:`PyObject\\*`."
msgstr ""
"이것은 :c:func:`PyDict_GetItem`\\와 같지만, *key*\\가 :c:type:`PyObject\\*`\\가 아닌 "
":c:type:`const char\\*`\\로 지정됩니다."

#: ../Doc/c-api/dict.rst:116
msgid ""
"Note that exceptions which occur while calling :meth:`__hash__` and "
":meth:`__eq__` methods and creating a temporary string object will get "
"suppressed. To get error reporting use "
":c:func:`PyDict_GetItemWithError()` instead."
msgstr ""
":meth:`__hash__`\\와 :meth:`__eq__` 메서드를 호출하고 임시 문자열 객체를 만드는 동안 발생하는 예외는 "
"억제됩니다. 에러 보고를 얻으려면 대신 :c:func:`PyDict_GetItemWithError()`\\를 사용하십시오."

#: ../Doc/c-api/dict.rst:124
msgid ""
"This is the same as the Python-level :meth:`dict.setdefault`.  If "
"present, it returns the value corresponding to *key* from the dictionary "
"*p*.  If the key is not in the dict, it is inserted with value "
"*defaultobj* and *defaultobj* is returned.  This function evaluates the "
"hash function of *key* only once, instead of evaluating it independently "
"for the lookup and the insertion."
msgstr ""
"이것은 파이썬 수준의 :meth:`dict.setdefault`\\와 같습니다. 존재하면, 딕셔너리 *p*\\에서 *key*\\에 "
"해당하는 값을 반환합니다. 키가 dict에 없으면, 값 *defaultobj*\\로 삽입되고, *defaultobj*\\가 반환됩니다. "
"이 함수는 *key*\\의 해시 함수를 조회 및 삽입을 위해 독립적으로 평가하는 대신 한 번만 평가합니다."

#: ../Doc/c-api/dict.rst:134
msgid ""
"Return a :c:type:`PyListObject` containing all the items from the "
"dictionary."
msgstr "딕셔너리의 모든 항목을 포함하는 :c:type:`PyListObject`\\를 반환합니다."

#: ../Doc/c-api/dict.rst:139
msgid ""
"Return a :c:type:`PyListObject` containing all the keys from the "
"dictionary."
msgstr "딕셔너리의 모든 키를 포함하는 :c:type:`PyListObject`\\를 반환합니다."

#: ../Doc/c-api/dict.rst:144
msgid ""
"Return a :c:type:`PyListObject` containing all the values from the "
"dictionary *p*."
msgstr "딕셔너리 *p*\\의 모든 값을 포함하는 :c:type:`PyListObject`\\를 반환합니다."

#: ../Doc/c-api/dict.rst:152
msgid ""
"Return the number of items in the dictionary.  This is equivalent to "
"``len(p)`` on a dictionary."
msgstr "딕셔너리에 있는 항목의 수를 반환합니다. 이는 딕셔너리에 대한 ``len(p)``\\와 동등합니다."

#: ../Doc/c-api/dict.rst:158
msgid ""
"Iterate over all key-value pairs in the dictionary *p*.  The "
":c:type:`Py_ssize_t` referred to by *ppos* must be initialized to ``0`` "
"prior to the first call to this function to start the iteration; the "
"function returns true for each pair in the dictionary, and false once all"
" pairs have been reported.  The parameters *pkey* and *pvalue* should "
"either point to :c:type:`PyObject\\*` variables that will be filled in "
"with each key and value, respectively, or may be *NULL*.  Any references "
"returned through them are borrowed.  *ppos* should not be altered during "
"iteration. Its value represents offsets within the internal dictionary "
"structure, and since the structure is sparse, the offsets are not "
"consecutive."
msgstr ""
"딕셔너리 *p*\\의 모든 키-값 쌍을 이터레이트 합니다. *ppos*\\에 의해 참조된 :c:type:`Py_ssize_t`\\는, "
"이터레이션을 시작하기 위해 이 함수를 처음 호출하기 전에 ``0``\\으로 초기화되어야 합니다; 이 함수는 딕셔너리의 각 쌍에 대해 참을"
" 반환하고, 모든 쌍이 보고되었으면 거짓을 반환합니다. 매개 변수 *pkey*\\와 *pvalue*\\는 각각 키와 값으로 채울 "
":c:type:`PyObject\\*` 변수를 가리 키거나, *NULL* 일 수 있습니다. 이들을 통해 반환된 참조는 모두 "
"빌린(borrowed) 것입니다. 이터레이션 중에 *ppos*\\를 변경하면 안 됩니다. 이 값은 내부 딕셔너리 구조 내의 오프셋을 "
"나타내며, 구조가 희박하므로 오프셋이 연속되지 않습니다."

#: ../Doc/c-api/dict.rst:169
msgid "For example::"
msgstr "예를 들면::"

#: ../Doc/c-api/dict.rst:179
msgid ""
"The dictionary *p* should not be mutated during iteration.  It is safe to"
" modify the values of the keys as you iterate over the dictionary, but "
"only so long as the set of keys does not change.  For example::"
msgstr ""
"딕셔너리 *p*\\는 이터레이션 중에 변경해서는 안 됩니다. 딕셔너리를 이터레이트 할 때 값을 변경하는 것은 안전하지만, 키 집합이 "
"변경되지 않는 한만 그렇습니다. 예를 들면::"

#: ../Doc/c-api/dict.rst:204
msgid ""
"Iterate over mapping object *b* adding key-value pairs to dictionary *a*."
" *b* may be a dictionary, or any object supporting "
":c:func:`PyMapping_Keys` and :c:func:`PyObject_GetItem`. If *override* is"
" true, existing pairs in *a* will be replaced if a matching key is found "
"in *b*, otherwise pairs will only be added if there is not a matching key"
" in *a*. Return ``0`` on success or ``-1`` if an exception was raised."
msgstr ""
"매핑 객체 *b*\\를 이터레이트 하면서, 키-값 쌍을 딕셔너리 *a*\\에 추가합니다. *b*\\는 딕셔너리거나 "
":c:func:`PyMapping_Keys`\\와 :c:func:`PyObject_GetItem`\\를 지원하는 모든 객체일 수 "
"있습니다. *override*\\가 참이면, *a*\\에 있는 기존 쌍이 *b*\\에서 일치하는 키가 있으면 교체되고, 그렇지 않으면 "
"*a*\\와 일치하는 키가 없을 때만 쌍이 추가됩니다. 성공하면 ``0``\\을 반환하고, 예외가 발생하면 ``-1``\\을 반환합니다."

#: ../Doc/c-api/dict.rst:214
msgid ""
"This is the same as ``PyDict_Merge(a, b, 1)`` in C, and is similar to "
"``a.update(b)`` in Python except that :c:func:`PyDict_Update` doesn't "
"fall back to the iterating over a sequence of key value pairs if the "
"second argument has no \"keys\" attribute.  Return ``0`` on success or "
"``-1`` if an exception was raised."
msgstr ""
"이는 C에서 ``PyDict_Merge(a, b, 1)``\\와 같고, 두 번째 인자에 \"keys\" 어트리뷰트가 없을 때 "
":c:func:`PyDict_Update`\\가 키-값 쌍의 시퀀스에 대해 이터레이트 하지 않는다는 점만 제외하면, 파이썬에서 "
"``a.update(b)``\\와 유사합니다. 성공하면 ``0``\\을 반환하고, 예외가 발생하면 ``-1``\\을 반환합니다."

#: ../Doc/c-api/dict.rst:223
msgid ""
"Update or merge into dictionary *a*, from the key-value pairs in *seq2*. "
"*seq2* must be an iterable object producing iterable objects of length 2,"
" viewed as key-value pairs.  In case of duplicate keys, the last wins if "
"*override* is true, else the first wins. Return ``0`` on success or "
"``-1`` if an exception was raised. Equivalent Python (except for the "
"return value)::"
msgstr ""
"*seq2*\\의 키-값 쌍으로 딕셔너리 *a*\\를 갱신하거나 병합합니다. *seq2*\\는 키-값 쌍으로 간주하는 길이 2의 이터러블"
" 객체를 생성하는 이터러블 객체여야 합니다. 중복 키가 있으면, *override*\\가 참이면 마지막이 승리하고, 그렇지 않으면 첫 "
"번째가 승리합니다. 성공 시 ``0``\\을 반환하고, 예외가 발생하면 ``-1``\\을 반환합니다. 동등한 파이썬은 이렇습니다(반환 값"
" 제외) ::"

#: ../Doc/c-api/dict.rst:238
msgid "Clear the free list. Return the total number of freed items."
msgstr "자유 목록(free list)을 비웁니다. 해제된 항목의 총수를 반환합니다."
