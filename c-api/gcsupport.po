# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-12-25 10:27+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dong-gweon Oh <flowdas@gmail.com>\n"
"Language-Team: Korean (https://python.flowdas.com)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../Doc/c-api/gcsupport.rst:6
msgid "Supporting Cyclic Garbage Collection"
msgstr "순환 가비지 수집 지원"

#: ../Doc/c-api/gcsupport.rst:8
msgid ""
"Python's support for detecting and collecting garbage which involves "
"circular references requires support from object types which are "
"\"containers\" for other objects which may also be containers.  Types "
"which do not store references to other objects, or which only store "
"references to atomic types (such as numbers or strings), do not need to "
"provide any explicit support for garbage collection."
msgstr ""
"순환 참조를 포함하는 가비지를 탐지하고 수집하는 파이썬의 지원은 역시 컨테이너일 수 있는 다른 객체의 \"컨테이너\" 인 객체 형의 "
"지원이 필요합니다. 다른 객체에 대한 참조를 저장하지 않거나, 원자 형(가령 숫자나 문자열)에 대한 참조만 저장하는 형은 가비지 수집에 "
"대한 어떤 명시적인 지원을 제공할 필요가 없습니다."

#: ../Doc/c-api/gcsupport.rst:15
msgid ""
"To create a container type, the :c:member:`~PyTypeObject.tp_flags` field "
"of the type object must include the :const:`Py_TPFLAGS_HAVE_GC` and "
"provide an implementation of the :c:member:`~PyTypeObject.tp_traverse` "
"handler.  If instances of the type are mutable, a "
":c:member:`~PyTypeObject.tp_clear` implementation must also be provided."
msgstr ""
"컨테이너형을 만들려면, 형 객체의 :c:member:`~PyTypeObject.tp_flags` 필드가 "
":const:`Py_TPFLAGS_HAVE_GC`\\를 포함해야 하고 :c:member:`~PyTypeObject.tp_traverse`"
" 처리기 구현을 제공해야 합니다. 형의 인스턴스가 가변이면, :c:member:`~PyTypeObject.tp_clear` 구현도 "
"제공해야 합니다."

#: ../Doc/c-api/gcsupport.rst:24
msgid ""
"Objects with a type with this flag set must conform with the rules "
"documented here.  For convenience these objects will be referred to as "
"container objects."
msgstr ""
"이 플래그가 설정된 형의 객체는 여기에 설명된 규칙을 준수해야 합니다. 편의를 위해 이러한 객체를 컨테이너 객체라고 하겠습니다."

#: ../Doc/c-api/gcsupport.rst:28
msgid "Constructors for container types must conform to two rules:"
msgstr "컨테이너형의 생성자는 두 가지 규칙을 준수해야 합니다:"

#: ../Doc/c-api/gcsupport.rst:30
msgid ""
"The memory for the object must be allocated using "
":c:func:`PyObject_GC_New` or :c:func:`PyObject_GC_NewVar`."
msgstr ""
"객체의 메모리는 :c:func:`PyObject_GC_New` 나 :c:func:`PyObject_GC_NewVar`\\를 사용하여 "
"할당해야 합니다."

#: ../Doc/c-api/gcsupport.rst:33
msgid ""
"Once all the fields which may contain references to other containers are "
"initialized, it must call :c:func:`PyObject_GC_Track`."
msgstr ""
"다른 컨테이너에 대한 참조를 포함할 수 있는 모든 필드가 초기화되면, :c:func:`PyObject_GC_Track`\\를 호출해야 "
"합니다."

#: ../Doc/c-api/gcsupport.rst:39
msgid ""
"Analogous to :c:func:`PyObject_New` but for container objects with the "
":const:`Py_TPFLAGS_HAVE_GC` flag set."
msgstr ""
":c:func:`PyObject_New`\\와 유사하지만, :const:`Py_TPFLAGS_HAVE_GC` 플래그가 설정된 컨테이너 "
"객체를 위한 것."

#: ../Doc/c-api/gcsupport.rst:45
msgid ""
"Analogous to :c:func:`PyObject_NewVar` but for container objects with the"
" :const:`Py_TPFLAGS_HAVE_GC` flag set."
msgstr ""
":c:func:`PyObject_NewVar`\\와 유사하지만, :const:`Py_TPFLAGS_HAVE_GC` 플래그가 설정된 "
"컨테이너 객체를 위한 것."

#: ../Doc/c-api/gcsupport.rst:51
msgid ""
"Resize an object allocated by :c:func:`PyObject_NewVar`.  Returns the "
"resized object or *NULL* on failure.  *op* must not be tracked by the "
"collector yet."
msgstr ""
":c:func:`PyObject_NewVar`\\에 의해 할당된 객체의 크기를 변경합니다. 크기가 조정된 객체나 실패하면 "
"*NULL*\\을 반환합니다. *op*\\는 아직 수집기가 추적하지 않아야 합니다."

#: ../Doc/c-api/gcsupport.rst:57
msgid ""
"Adds the object *op* to the set of container objects tracked by the "
"collector.  The collector can run at unexpected times so objects must be "
"valid while being tracked.  This should be called once all the fields "
"followed by the :c:member:`~PyTypeObject.tp_traverse` handler become "
"valid, usually near the end of the constructor."
msgstr ""
"수집기가 추적하는 컨테이너 객체 집합에 객체 *op*\\를 추가합니다. 수집기는 예기치 않은 시간에 실행될 수 있으므로 추적되는 동안 "
"객체가 유효해야 합니다. :c:member:`~PyTypeObject.tp_traverse` 처리기가 탐색하는 모든 필드가 유효해지면 "
"호출해야 합니다, 보통 생성자의 끝부분 근처입니다."

#: ../Doc/c-api/gcsupport.rst:66
msgid ""
"A macro version of :c:func:`PyObject_GC_Track`.  It should not be used "
"for extension modules."
msgstr ":c:func:`PyObject_GC_Track`\\의 매크로 버전. 확장 모듈에는 사용하지 말아야 합니다."

#: ../Doc/c-api/gcsupport.rst:69 ../Doc/c-api/gcsupport.rst:101
msgid "This macro is removed from Python 3.8."
msgstr "이 매크로는 파이썬 3.8에서 삭제되었습니다."

#: ../Doc/c-api/gcsupport.rst:72
msgid ""
"Similarly, the deallocator for the object must conform to a similar pair "
"of rules:"
msgstr "마찬가지로, 객체의 할당해제자(deallocator)는 비슷한 규칙 쌍을 준수해야 합니다:"

#: ../Doc/c-api/gcsupport.rst:75
msgid ""
"Before fields which refer to other containers are invalidated, "
":c:func:`PyObject_GC_UnTrack` must be called."
msgstr "다른 컨테이너를 참조하는 필드가 무효화 되기 전에, :c:func:`PyObject_GC_UnTrack`\\를 호출해야 합니다."

#: ../Doc/c-api/gcsupport.rst:78
msgid "The object's memory must be deallocated using :c:func:`PyObject_GC_Del`."
msgstr "객체의 메모리는 :c:func:`PyObject_GC_Del`\\를 사용하여 할당 해제되어야 합니다."

#: ../Doc/c-api/gcsupport.rst:83
msgid ""
"Releases memory allocated to an object using :c:func:`PyObject_GC_New` or"
" :c:func:`PyObject_GC_NewVar`."
msgstr ""
":c:func:`PyObject_GC_New` 나 :c:func:`PyObject_GC_NewVar`\\를 사용하여 객체에 할당된 "
"메모리를 해제합니다."

#: ../Doc/c-api/gcsupport.rst:89
msgid ""
"Remove the object *op* from the set of container objects tracked by the "
"collector.  Note that :c:func:`PyObject_GC_Track` can be called again on "
"this object to add it back to the set of tracked objects.  The "
"deallocator (:c:member:`~PyTypeObject.tp_dealloc` handler) should call "
"this for the object before any of the fields used by the "
":c:member:`~PyTypeObject.tp_traverse` handler become invalid."
msgstr ""
"수집기가 추적하는 컨테이너 객체 집합에서 *op* 객체를 제거합니다. :c:func:`PyObject_GC_Track`\\를 이 객체에 "
"대해 다시 호출하여 추적 객체 집합에 다시 추가할 수 있음에 유의하십시오. "
"할당해제자(:c:member:`~PyTypeObject.tp_dealloc` 처리기)는 "
":c:member:`~PyTypeObject.tp_traverse` 처리기에서 사용하는 필드가 무효화 되기 전에 객체에 대해 이 함수를 "
"호출해야 합니다."

#: ../Doc/c-api/gcsupport.rst:98
msgid ""
"A macro version of :c:func:`PyObject_GC_UnTrack`.  It should not be used "
"for extension modules."
msgstr ":c:func:`PyObject_GC_UnTrack`\\의 매크로 버전. 확장 모듈에는 사용하지 말아야 합니다."

#: ../Doc/c-api/gcsupport.rst:104
msgid ""
"The :c:member:`~PyTypeObject.tp_traverse` handler accepts a function "
"parameter of this type:"
msgstr ""
":c:member:`~PyTypeObject.tp_traverse` 처리기는 다음과 같은 형의 함수 매개 변수를 받아들입니다:"

#: ../Doc/c-api/gcsupport.rst:109
msgid ""
"Type of the visitor function passed to the "
":c:member:`~PyTypeObject.tp_traverse` handler. The function should be "
"called with an object to traverse as *object* and the third parameter to "
"the :c:member:`~PyTypeObject.tp_traverse` handler as *arg*.  The Python "
"core uses several visitor functions to implement cyclic garbage "
"detection; it's not expected that users will need to write their own "
"visitor functions."
msgstr ""
":c:member:`~PyTypeObject.tp_traverse` 처리기에 전달되는 방문자 함수의 형. 이 함수는 탐색하는 객체를 "
"*object*\\로, :c:member:`~PyTypeObject.tp_traverse` 처리기의 세 번째 매개 변수를 *arg*\\로"
" 호출되어야 합니다. 파이썬 코어는 순환 가비지 탐지를 구현하기 위해 여러 방문자 함수를 사용합니다; 사용자가 자신의 방문자 함수를 "
"작성해야 할 필요는 없습니다."

#: ../Doc/c-api/gcsupport.rst:116
msgid ""
"The :c:member:`~PyTypeObject.tp_traverse` handler must have the following"
" type:"
msgstr ":c:member:`~PyTypeObject.tp_traverse` 처리기는 다음 형이어야 합니다:"

#: ../Doc/c-api/gcsupport.rst:121
msgid ""
"Traversal function for a container object.  Implementations must call the"
" *visit* function for each object directly contained by *self*, with the "
"parameters to *visit* being the contained object and the *arg* value "
"passed to the handler.  The *visit* function must not be called with a "
"*NULL* object argument.  If *visit* returns a non-zero value that value "
"should be returned immediately."
msgstr ""
"컨테이너 객체의 탐색 함수입니다. 구현은 *self*\\에 직접 포함된 각 객체에 대해 *visit* 함수를 호출해야 하며, "
"*visit*\\에 대한 매개 변수는 포함된 객체와 처리기로 전달된 *arg* 값입니다. *visit* 함수는 *NULL* object "
"인자로 호출하면 안 됩니다. *visit*\\가 0이 아닌 값을 반환하면 그 값이 즉시 반환되어야 합니다."

#: ../Doc/c-api/gcsupport.rst:128
msgid ""
"To simplify writing :c:member:`~PyTypeObject.tp_traverse` handlers, a "
":c:func:`Py_VISIT` macro is provided.  In order to use this macro, the "
":c:member:`~PyTypeObject.tp_traverse` implementation must name its "
"arguments exactly *visit* and *arg*:"
msgstr ""
":c:member:`~PyTypeObject.tp_traverse` 처리기 작성을 단순화하기 위해, :c:func:`Py_VISIT` "
"매크로가 제공됩니다. 이 매크로를 사용하려면, :c:member:`~PyTypeObject.tp_traverse` 구현은 인자의 이름을 "
"정확히 *visit* 와 *arg*\\로 지정해야 합니다:"

#: ../Doc/c-api/gcsupport.rst:135
msgid ""
"If *o* is not *NULL*, call the *visit* callback, with arguments *o* and "
"*arg*.  If *visit* returns a non-zero value, then return it. Using this "
"macro, :c:member:`~PyTypeObject.tp_traverse` handlers look like::"
msgstr ""
"*o*\\가 *NULL*\\이 아니면, *o* 와 *arg* 인자로 *visit* 콜백을 호출합니다. *visit*\\가 0이 아닌 값을"
" 반환하면, 그것을 반환합니다. 이 매크로를 사용하면, :c:member:`~PyTypeObject.tp_traverse` 처리기가 "
"다음과 같아집니다::"

#: ../Doc/c-api/gcsupport.rst:148
msgid ""
"The :c:member:`~PyTypeObject.tp_clear` handler must be of the "
":c:type:`inquiry` type, or *NULL* if the object is immutable."
msgstr ""
":c:member:`~PyTypeObject.tp_clear` 처리기는 :c:type:`inquiry` 형이거나 객체가 불변이면 "
"*NULL*\\이어야 합니다."

#: ../Doc/c-api/gcsupport.rst:154
msgid ""
"Drop references that may have created reference cycles.  Immutable "
"objects do not have to define this method since they can never directly "
"create reference cycles.  Note that the object must still be valid after "
"calling this method (don't just call :c:func:`Py_DECREF` on a reference)."
"  The collector will call this method if it detects that this object is "
"involved in a reference cycle."
msgstr ""
"참조 순환을 생성했을 수 있는 참조를 삭제합니다. 불변 객체는 참조 순환을 직접 생성할 수 없으므로, 이 메서드를 정의 할 필요가 "
"없습니다. 이 메서드를 호출한 후에도 객체가 유효해야 합니다 (단지 참조에 대해 :c:func:`Py_DECREF`\\를 호출하지 "
"마십시오). 이 객체가 참조 순환에 참여하고 있음을 수집기가 감지하면 이 메서드를 호출합니다."
