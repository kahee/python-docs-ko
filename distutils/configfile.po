# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-12-25 10:27+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dong-gweon Oh <flowdas@gmail.com>\n"
"Language-Team: Korean (https://python.flowdas.com)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../Doc/distutils/configfile.rst:5
msgid "Writing the Setup Configuration File"
msgstr "설치 구성 파일 작성하기"

#: ../Doc/distutils/configfile.rst:7
msgid ""
"Often, it's not possible to write down everything needed to build a "
"distribution *a priori*: you may need to get some information from the "
"user, or from the user's system, in order to proceed.  As long as that "
"information is fairly simple---a list of directories to search for C "
"header files or libraries, for example---then providing a configuration "
"file, :file:`setup.cfg`, for users to edit is a cheap and easy way to "
"solicit it.  Configuration files also let you provide default values for "
"any command option, which the installer can then override either on the "
"command-line or by editing the config file."
msgstr ""
"종종, 배포판을 빌드하는데 필요한 모든 것을 *사전에* 작성하는 것은 불가능합니다: 사용자나 시스템에서 정보를 얻어야 계속 진행할 수 "
"있습니다. 그 정보가 매우 간단하다면 ---예를 들어, C 헤더 파일이나 라이브러리를 검색할 디렉터리 목록--- 사용자가 편집할 수 있는"
" 구성 파일 :file:`setup.cfg`\\를 제공하는 것은 저렴하고 쉬운 방법입니다. 구성 파일을 사용하면 모든 명령 옵션에 대한 "
"기본값을 제공할 수도 있습니다. 이 옵션은 설치하는 사람이 명령 줄이나 구성 파일을 편집해서 재정의하도록 할 수 있습니다."

#: ../Doc/distutils/configfile.rst:16
msgid ""
"The setup configuration file is a useful middle-ground between the setup "
"script---which, ideally, would be opaque to installers [#]_---and the "
"command-line to the setup script, which is outside of your control and "
"entirely up to the installer.  In fact, :file:`setup.cfg` (and any other "
"Distutils configuration files present on the target system) are processed"
" after the contents of the setup script, but before the command-line.  "
"This has  several useful consequences:"
msgstr ""
"설치 구성 파일은 설치 스크립트(이상적으로는, 설치하는 사람에게 불투명한 [#]_)와 설치 스크립트에 대한 명령 줄(여러분의 제어를 "
"벗어나고 전적으로 설치하는 사람에 달려 있습니다) 사이의 유용한 중간 지대입니다. 사실, :file:`setup.cfg`\\(와 대상 "
"시스템에 있는 다른 모든 Distutils 구성 파일)는 설치 스크립트의 내용 뒤에, 하지만 명령 줄 앞에서 처리됩니다. 이것은 몇 가지"
" 유용한 결과를 줍니다:"

#: ../Doc/distutils/configfile.rst:30
msgid ""
"installers can override some of what you put in :file:`setup.py` by "
"editing :file:`setup.cfg`"
msgstr ""
"설치하는 사람은 :file:`setup.cfg`\\를 편집하여 여러분이 :file:`setup.py`\\에 넣은 것을 재정의할 수 "
"있습니다."

#: ../Doc/distutils/configfile.rst:33
msgid ""
"you can provide non-standard defaults for options that are not easily set"
" in :file:`setup.py`"
msgstr "여러분은 :file:`setup.py`\\에서 쉽게 설정할 수 없는 옵션에 대해 비표준 기본값을 제공할 수 있습니다"

#: ../Doc/distutils/configfile.rst:36
msgid ""
"installers can override anything in :file:`setup.cfg` using the command-"
"line options to :file:`setup.py`"
msgstr ""
"설치하는 사람은 :file:`setup.py`\\에 대한 명령 줄 옵션을 사용하여 :file:`setup.cfg`\\의 모든 것을 "
"재정의할 수 있습니다"

#: ../Doc/distutils/configfile.rst:39
msgid "The basic syntax of the configuration file is simple:"
msgstr "구성 파일의 기본 문법은 간단합니다:"

#: ../Doc/distutils/configfile.rst:47
msgid ""
"where *command* is one of the Distutils commands (e.g. "
":command:`build_py`, :command:`install`), and *option* is one of the "
"options that command supports. Any number of options can be supplied for "
"each command, and any number of command sections can be included in the "
"file.  Blank lines are ignored, as are comments, which run from a ``'#'``"
" character until the end of the line.  Long option values can be split "
"across multiple lines simply by indenting the continuation lines."
msgstr ""
"여기서 *command*\\는 Distutils 명령 (예를 들어, :command:`build_py`, "
":command:`install`) 중 하나이며, *option*\\은 명령이 지원하는 옵션 중 하나입니다. 각 명령에 대해 임의의 수의"
" 옵션을 제공할 수 있으며, 임의의 수의 명령 섹션을 파일에 포함할 수 있습니다. ``'#'`` 문자에서 줄의 끝까지 확장되는 주석과 "
"마찬가지로 공백 줄은 무시됩니다. 긴 옵션 값은 단순히 이어지는 줄을 들여쓰기하는 것으로 여러 줄로 나눌 수 있습니다."

#: ../Doc/distutils/configfile.rst:55
msgid ""
"You can find out the list of options supported by a particular command "
"with the universal :option:`!--help` option, e.g."
msgstr "범용 :option:`!--help` 옵션을 사용하여 특정 명령이 지원하는 옵션 목록을 찾을 수 있습니다, 예를 들어"

#: ../Doc/distutils/configfile.rst:73
msgid ""
"Note that an option spelled :option:`!--foo-bar` on the command-line  is "
"spelled ``foo_bar`` in configuration files."
msgstr ""
"명령 줄에서 :option:`!--foo-bar`\\로 입력되는 옵션은 구성 파일에서 ``foo_bar``\\로 표시해야 함에 "
"유의하십시오."

#: ../Doc/distutils/configfile.rst:78
msgid ""
"For example, say you want your extensions to be built \"in-place\"---that"
" is, you have an extension :mod:`pkg.ext`, and you want the compiled "
"extension file (:file:`ext.so` on Unix, say) to be put in the same source"
" directory as your pure Python modules :mod:`pkg.mod1` and "
":mod:`pkg.mod2`.  You can always use the :option:`!--inplace` option on "
"the command-line to ensure this:"
msgstr ""
"예를 들어, 여러분의 확장을 \"제자리(in-place)\"에 빌드하려고 한다고 합시다 --- 즉, 확장 :mod:`pkg.ext`\\이"
" 있고, 컴파일된 확장 파일(유닉스에서 :file:`ext.so`\\이라고 합시다)이 여러분의 순수 파이썬 모듈 "
":mod:`pkg.mod1`\\와 :mod:`pkg.mod2`\\과 같은 소스 디렉터리에 들어가기를 원합니다. 이렇게 하려면 항상 명령 "
"줄에서 :option:`!--inplace` 옵션을 사용할 수 있습니다:"

#: ../Doc/distutils/configfile.rst:88
msgid ""
"But this requires that you always specify the :command:`build_ext` "
"command explicitly, and remember to provide :option:`!--inplace`. An "
"easier way is to \"set and forget\" this option, by encoding it in "
":file:`setup.cfg`, the configuration file for this distribution:"
msgstr ""
"그러나 이렇게 하려면 항상 :command:`build_ext` 명령을 명시적으로 지정하고, :option:`!--inplace`\\를 "
"제공하는 것을 기억해야 합니다. 더 쉬운 방법은 이 배포판의 설정 파일인 :file:`setup.cfg`\\에 인코딩하여, 이 옵션을 "
"\"설정하고 잊어버리는\" 것입니다:"

#: ../Doc/distutils/configfile.rst:98
msgid ""
"This will affect all builds of this module distribution, whether or not "
"you explicitly specify :command:`build_ext`.  If you include "
":file:`setup.cfg` in your source distribution, it will also affect end-"
"user builds---which is probably a bad idea for this option, since always "
"building extensions in-place would break installation of the module "
"distribution.  In certain peculiar cases, though, modules are built right"
" in their installation directory, so this is conceivably a useful "
"ability.  (Distributing extensions that expect to be built in their "
"installation directory is almost always a bad idea, though.)"
msgstr ""
"이것은 :command:`build_ext`\\를 명시적으로 지정했는지와 관계없이, 이 모듈 배포의 모든 빌드에 영향을 미칩니다. 소스 "
"배포판에 :file:`setup.cfg`\\를 포함 시키면, 최종 사용자 빌드에도 영향을 미칩니다 --- 항상 제자리에서 확장을 빌드하면"
" 모듈 배포 설치를 망가뜨릴 수 있으므로, 이 옵션의 경우는 나쁜 생각일 수 있습니다. 그러나 어떤 특별한 경우에는, 설치 디렉터리에 "
"모듈이 바로 빌드되기 때문에 유용한 기능이라고 상상할 수 있습니다. (설치 디렉터리에 빌드 될 것으로 기대하는 확장을 배포하는 것은 거의"
" 항상 나쁜 생각입니다.)"

#: ../Doc/distutils/configfile.rst:107
msgid ""
"Another example: certain commands take a lot of options that don't change"
" from run to run; for example, :command:`bdist_rpm` needs to know "
"everything required to generate a \"spec\" file for creating an RPM "
"distribution.  Some of this information comes from the setup script, and "
"some is automatically generated by the Distutils (such as the list of "
"files installed).  But some of it has to be supplied as options to "
":command:`bdist_rpm`, which would be very tedious to do on the command-"
"line for every run.  Hence, here is a snippet from the Distutils' own "
":file:`setup.cfg`:"
msgstr ""
"다른 예: 어떤 명령은 실행마다 변경되지는 않는 많은 옵션을 사용합니다; 예를 들어, :command:`bdist_rpm`\\은 RPM "
"배포를 만들기 위해 \"spec\" 파일을 생성하는 데 필요한 모든 것을 알아야 합니다. 이 정보 중 일부는 설치 스크립트에서 오고, "
"일부는 Distutils가 자동으로 생성합니다 (가령 설치된 파일 목록). 그러나 그중 일부는 :command:`bdist_rpm`\\에"
" 대한 옵션으로 제공되어야 하는데, 실행 때마다 명령 줄에서 수행하는 것은 매우 따분합니다. 그래서, 여기 Distutils 자체의 "
":file:`setup.cfg`\\에서 발췌한 내용이 있습니다:"

#: ../Doc/distutils/configfile.rst:127
msgid ""
"Note that the ``doc_files`` option is simply a whitespace-separated "
"string split across multiple lines for readability."
msgstr "``doc_files`` 옵션은 가독성을 위해 여러 줄에 나누어 공백으로 구분된 문자열일 뿐임에 유의하십시오."

#: ../Doc/distutils/configfile.rst:134
msgid ":ref:`inst-config-syntax` in \"Installing Python Modules\""
msgstr "\"파이썬 모듈 설치\"의 :ref:`inst-config-syntax`"

#: ../Doc/distutils/configfile.rst:134
msgid ""
"More information on the configuration files is available in the manual "
"for system administrators."
msgstr "구성 파일에 대한 자세한 내용은 시스템 관리자용 설명서에 있습니다."

#: ../Doc/distutils/configfile.rst:139
msgid "Footnotes"
msgstr "각주"

#: ../Doc/distutils/configfile.rst:140
msgid ""
"This ideal probably won't be achieved until auto-configuration is fully "
"supported by the Distutils."
msgstr "이 이상은 아마도 자동 구성이 Distutils에 의해 완전히 지원되기 전까지는 달성되지 않을 것입니다."
