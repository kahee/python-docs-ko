# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-11-26 18:49+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dong-gweon Oh <flowdas@gmail.com>\n"
"Language-Team: Korean (https://python.flowdas.com)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"

#: ../Doc/c-api/weakref.rst:6
msgid "Weak Reference Objects"
msgstr "약한 참조 객체"

#: ../Doc/c-api/weakref.rst:8
msgid ""
"Python supports *weak references* as first-class objects.  There are two "
"specific object types which directly implement weak references.  The "
"first is a simple reference object, and the second acts as a proxy for "
"the original object as much as it can."
msgstr ""
"파이썬은 *약한 참조*\\를 1급 객체로 지원합니다. 약한 참조를 직접 구현하는 두 가지 구체적인 객체 형이 있습니다. 첫 번째는 간단한"
" 참조 객체이며, 두 번째는 가능한 한 원래 객체의 프락시 역할을 합니다."

#: ../Doc/c-api/weakref.rst:16
msgid "Return true if *ob* is either a reference or proxy object."
msgstr "*ob*\\가 참조 객체나 프락시 객체면 참을 반환합니다."

#: ../Doc/c-api/weakref.rst:21
msgid "Return true if *ob* is a reference object."
msgstr "*ob*\\가 참조 객체면 참을 반환합니다."

#: ../Doc/c-api/weakref.rst:26
msgid "Return true if *ob* is a proxy object."
msgstr "*ob*\\가 프락시 객체면 참을 반환합니다."

#: ../Doc/c-api/weakref.rst:31
msgid ""
"Return a weak reference object for the object *ob*.  This will always "
"return a new reference, but is not guaranteed to create a new object; an "
"existing reference object may be returned.  The second parameter, "
"*callback*, can be a callable object that receives notification when *ob*"
" is garbage collected; it should accept a single parameter, which will be"
" the weak reference object itself. *callback* may also be ``None`` or "
"*NULL*.  If *ob* is not a weakly-referencable object, or if *callback* is"
" not callable, ``None``, or *NULL*, this will return *NULL* and raise "
":exc:`TypeError`."
msgstr ""
"*ob* 객체에 대한 약한 참조 객체를 반환합니다. 이것은 항상 새로운 참조를 돌려주지만, 새로운 객체를 생성하는 것이 보장되지는 "
"않습니다; 기존 참조 객체가 반환될 수 있습니다. 두 번째 매개 변수인 *callback*\\은 *ob*\\가 가비지 수집될 때 알림을 "
"받는 콜러블 객체가 될 수 있습니다; 하나의 매개 변수를 받아들여야 하는데, 약한 참조 객체 자체입니다. *callback*\\은 "
"``None`` 이나 *NULL* 일 수도 있습니다. *ob*\\가 약하게 참조할 수 있는 객체가 아니거나, *callback*\\이 "
"콜러블, ``None`` 또는 *NULL*\\이 아니면, *NULL*\\을 반환하고 :exc:`TypeError`\\를 발생시킵니다."

#: ../Doc/c-api/weakref.rst:43
msgid ""
"Return a weak reference proxy object for the object *ob*.  This will "
"always return a new reference, but is not guaranteed to create a new "
"object; an existing proxy object may be returned.  The second parameter, "
"*callback*, can be a callable object that receives notification when *ob*"
" is garbage collected; it should accept a single parameter, which will be"
" the weak reference object itself. *callback* may also be ``None`` or "
"*NULL*.  If *ob* is not a weakly-referencable object, or if *callback* is"
" not callable, ``None``, or *NULL*, this will return *NULL* and raise "
":exc:`TypeError`."
msgstr ""
"*ob* 객체에 대한 약한 참조 프락시 객체를 반환합니다. 이것은 항상 새로운 참조를 돌려주지만, 새로운 객체를 생성하는 것이 보장되지는"
" 않습니다; 기존 프락시 객체가 반환될 수 있습니다. 두 번째 매개 변수인 *callback*\\은 *ob*\\가 가비지 수집될 때 "
"알림을 받는 콜러블 객체가 될 수 있습니다; 하나의 매개 변수를 받아들여야 하는데, 약한 참조 객체 자체입니다. *callback*\\은"
" ``None`` 이나 *NULL* 일 수도 있습니다. *ob*\\가 약하게 참조할 수 있는 객체가 아니거나, *callback*\\이 "
"콜러블, ``None`` 또는 *NULL*\\이 아니면, *NULL*\\을 반환하고 :exc:`TypeError`\\를 발생시킵니다."

#: ../Doc/c-api/weakref.rst:55
msgid ""
"Return the referenced object from a weak reference, *ref*.  If the "
"referent is no longer live, returns :const:`Py_None`."
msgstr ""
"약한 참조(*ref*)로부터 참조된 객체를 반환합니다. 참조가 더는 살아있지 않으면, :const:`Py_None`\\을 반환합니다."

#: ../Doc/c-api/weakref.rst:60
msgid ""
"This function returns a **borrowed reference** to the referenced object. "
"This means that you should always call :c:func:`Py_INCREF` on the object "
"except if you know that it cannot be destroyed while you are still using "
"it."
msgstr ""
"이 함수는 참조된 객체에 대한 **빌린 참조**\\를 반환합니다. 이는 객체를 계속 사용하는 동안 객체가 파괴될 수 없음을 알고 있을 "
"때를 제외하고, 객체에 대해 항상 :c:func:`Py_INCREF`\\를 호출해야 함을 뜻합니다."

#: ../Doc/c-api/weakref.rst:68
msgid ""
"Similar to :c:func:`PyWeakref_GetObject`, but implemented as a macro that"
" does no error checking."
msgstr ":c:func:`PyWeakref_GetObject`\\와 유사하지만, 에러 검사를 수행하지 않는 매크로로 구현됩니다."
