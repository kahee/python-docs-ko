# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-11-26 18:49+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dong-gweon Oh <flowdas@gmail.com>\n"
"Language-Team: Korean (https://python.flowdas.com)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"

#: ../Doc/c-api/refcounting.rst:8
msgid "Reference Counting"
msgstr "참조 횟수"

#: ../Doc/c-api/refcounting.rst:10
msgid ""
"The macros in this section are used for managing reference counts of "
"Python objects."
msgstr "이 섹션의 매크로는 파이썬 객체의 참조 횟수를 관리하는 데 사용됩니다."

#: ../Doc/c-api/refcounting.rst:16
msgid ""
"Increment the reference count for object *o*.  The object must not be "
"*NULL*; if you aren't sure that it isn't *NULL*, use "
":c:func:`Py_XINCREF`."
msgstr ""
"객체 *o*\\에 대한 참조 횟수를 늘립니다. 객체는 *NULL* 일 수 없습니다; *NULL*\\이 아닌지 확실하지 않으면, "
":c:func:`Py_XINCREF`\\를 사용하십시오."

#: ../Doc/c-api/refcounting.rst:22
msgid ""
"Increment the reference count for object *o*.  The object may be *NULL*, "
"in which case the macro has no effect."
msgstr "객체 *o*\\에 대한 참조 횟수를 늘립니다. 객체는 *NULL* 일 수 있습니다, 이때 매크로는 효과가 없습니다."

#: ../Doc/c-api/refcounting.rst:28
msgid ""
"Decrement the reference count for object *o*.  The object must not be "
"*NULL*; if you aren't sure that it isn't *NULL*, use "
":c:func:`Py_XDECREF`.  If the reference count reaches zero, the object's "
"type's deallocation function (which must not be *NULL*) is invoked."
msgstr ""
"객체 *o*\\에 대한 참조 횟수를 감소시킵니다. 객체는 *NULL* 일 수 없습니다; *NULL*\\이 아닌지 확실하지 않으면, "
":c:func:`Py_XDECREF`\\를 사용하십시오. 참조 횟수가 0이 되면, 객체 형의 할당 해제 함수 (반드시 *NULL*\\이 "
"아니어야 합니다)가 호출됩니다."

#: ../Doc/c-api/refcounting.rst:35
msgid ""
"The deallocation function can cause arbitrary Python code to be invoked "
"(e.g. when a class instance with a :meth:`__del__` method is "
"deallocated).  While exceptions in such code are not propagated, the "
"executed code has free access to all Python global variables.  This means"
" that any object that is reachable from a global variable should be in a "
"consistent state before :c:func:`Py_DECREF` is invoked.  For example, "
"code to delete an object from a list should copy a reference to the "
"deleted object in a temporary variable, update the list data structure, "
"and then call :c:func:`Py_DECREF` for the temporary variable."
msgstr ""
"할당 해제 함수는 임의의 파이썬 코드가 호출되도록 할 수 있습니다 (예를 들어, :meth:`__del__` 메서드가 있는 클래스 "
"인스턴스가 할당 해제될 때). 이러한 코드에서의 예외는 전파되지 않지만, 실행된 코드는 모든 파이썬 전역 변수에 자유롭게 액세스할 수 "
"있습니다. 이것은 :c:func:`Py_DECREF`\\가 호출되기 전에 전역 변수에서 도달할 수 있는 모든 객체가 일관성 있는 상태에 "
"있어야 함을 뜻합니다. 예를 들어, 리스트에서 객체를 삭제하는 코드는 삭제된 객체에 대한 참조를 임시 변수에 복사하고, 리스트 데이터 "
"구조를 갱신한 다음, 임시 변수에 대해 :c:func:`Py_DECREF`\\를 호출해야 합니다."

#: ../Doc/c-api/refcounting.rst:47
msgid ""
"Decrement the reference count for object *o*.  The object may be *NULL*, "
"in which case the macro has no effect; otherwise the effect is the same "
"as for :c:func:`Py_DECREF`, and the same warning applies."
msgstr ""
"객체 *o*\\에 대한 참조 횟수를 감소시킵니다. 객체는 *NULL* 일 수 있습니다, 이때 매크로는 효과가 없습니다; 그렇지 않으면 "
"효과는 :c:func:`Py_DECREF`\\와 같으며 같은 경고가 적용됩니다."

#: ../Doc/c-api/refcounting.rst:54
msgid ""
"Decrement the reference count for object *o*.  The object may be *NULL*, "
"in which case the macro has no effect; otherwise the effect is the same "
"as for :c:func:`Py_DECREF`, except that the argument is also set to "
"*NULL*.  The warning for :c:func:`Py_DECREF` does not apply with respect "
"to the object passed because the macro carefully uses a temporary "
"variable and sets the argument to *NULL* before decrementing its "
"reference count."
msgstr ""
"객체 *o*\\에 대한 참조 횟수를 감소시킵니다. 객체는 *NULL* 일 수 있습니다, 이때 매크로는 효과가 없습니다; 그렇지 않으면 "
"인자도 *NULL*\\로 설정된다는 점을 제외하고는, 효과가 :c:func:`Py_DECREF`\\와 같습니다. 매크로가 임시 변수를 "
"신중하게 사용하고, 참조 횟수를 줄이기 전에 인자를 *NULL*\\로 설정하기 때문에, :c:func:`Py_DECREF`\\에 대한 "
"경고는 전달된 객체와 관련하여 적용되지 않습니다."

#: ../Doc/c-api/refcounting.rst:61
msgid ""
"It is a good idea to use this macro whenever decrementing the value of a "
"variable that might be traversed during garbage collection."
msgstr "가비지 수집 중에 탐색 될 수 있는 변수의 값을 감소시킬 때마다 이 매크로를 사용하는 것이 좋습니다."

#: ../Doc/c-api/refcounting.rst:65
msgid ""
"The following functions are for runtime dynamic embedding of Python: "
"``Py_IncRef(PyObject *o)``, ``Py_DecRef(PyObject *o)``. They are simply "
"exported function versions of :c:func:`Py_XINCREF` and "
":c:func:`Py_XDECREF`, respectively."
msgstr ""
"다음 함수는 파이썬의 실행 시간 동적 내장을 위한 것입니다: ``Py_IncRef(PyObject *o)``, "
"``Py_DecRef(PyObject *o)``. 이것들은 단순히 :c:func:`Py_XINCREF`\\와 "
":c:func:`Py_XDECREF`\\의 노출된 함수 버전입니다."

#: ../Doc/c-api/refcounting.rst:70
msgid ""
"The following functions or macros are only for use within the interpreter"
" core: :c:func:`_Py_Dealloc`, :c:func:`_Py_ForgetReference`, "
":c:func:`_Py_NewReference`, as well as the global variable "
":c:data:`_Py_RefTotal`."
msgstr ""
"다음 함수나 매크로는 인터프리터 코어에서만 사용할 수 있습니다: :c:func:`_Py_Dealloc`, "
":c:func:`_Py_ForgetReference`, :c:func:`_Py_NewReference` 및 전역 변수 "
":c:data:`_Py_RefTotal`."
