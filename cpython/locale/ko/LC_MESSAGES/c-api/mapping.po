# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-12-25 10:27+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dong-gweon Oh <flowdas@gmail.com>\n"
"Language-Team: Korean (https://python.flowdas.com)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../Doc/c-api/mapping.rst:6
msgid "Mapping Protocol"
msgstr "매핑 프로토콜"

#: ../Doc/c-api/mapping.rst:8
msgid ""
"See also :c:func:`PyObject_GetItem`, :c:func:`PyObject_SetItem` and "
":c:func:`PyObject_DelItem`."
msgstr ""
":c:func:`PyObject_GetItem`, :c:func:`PyObject_SetItem` 및 "
":c:func:`PyObject_DelItem`\\도 참조하십시오."

#: ../Doc/c-api/mapping.rst:14
msgid ""
"Return ``1`` if the object provides mapping protocol or supports slicing,"
" and ``0`` otherwise.  Note that it returns ``1`` for Python classes with"
" a :meth:`__getitem__` method since in general case it is impossible to "
"determine what the type of keys it supports.  This function always "
"succeeds."
msgstr ""
"객체가 매핑 프로토콜을 제공하거나 슬라이싱을 지원하면 ``1``\\을 반환하고, 그렇지 않으면 ``0``\\을 반환합니다. "
":meth:`__getitem__` 메서드가 있는 파이썬 클래스의 경우 ``1``\\을 반환한다는 점에 유의하십시오; 일반적으로 "
"지원하는 키 형을 판단할 수 없기 때문입니다. 이 함수는 항상 성공합니다."

#: ../Doc/c-api/mapping.rst:26
msgid ""
"Returns the number of keys in object *o* on success, and ``-1`` on "
"failure. This is equivalent to the Python expression ``len(o)``."
msgstr ""
"성공 시 객체 *o*\\의 키 수를 반환하고, 실패하면 ``-1``\\을 반환합니다. 이는 파이썬 표현식 ``len(o)``\\와 "
"동등합니다."

#: ../Doc/c-api/mapping.rst:32
msgid ""
"Return element of *o* corresponding to the string *key* or *NULL* on "
"failure. This is the equivalent of the Python expression ``o[key]``. See "
"also :c:func:`PyObject_GetItem`."
msgstr ""
"문자열 *key*\\에 해당하는 *o*\\의 요소나 실패 시 *NULL*\\을 반환합니다. 이는 파이썬 표현식 "
"``o[key]``\\와 동등합니다. :c:func:`PyObject_GetItem`\\도 참조하십시오."

#: ../Doc/c-api/mapping.rst:39
msgid ""
"Map the string *key* to the value *v* in object *o*.  Returns ``-1`` on "
"failure.  This is the equivalent of the Python statement ``o[key] = v``. "
"See also :c:func:`PyObject_SetItem`."
msgstr ""
"객체 *o*\\에서 문자열 *key*\\를 값 *v*\\에 매핑합니다. 실패하면 ``-1``\\을 반환합니다. 이것은 파이썬 문장 "
"``o[key] = v``\\와 동등합니다. :c:func:`PyObject_SetItem`\\도 참조하십시오."

#: ../Doc/c-api/mapping.rst:46
msgid ""
"Remove the mapping for the object *key* from the object *o*.  Return "
"``-1`` on failure.  This is equivalent to the Python statement ``del "
"o[key]``. This is an alias of :c:func:`PyObject_DelItem`."
msgstr ""
"객체 *o*\\에서 객체 *key*\\에 대한 매핑을 제거합니다. 실패하면 ``-1``\\을 반환합니다. 이것은 파이썬 문장 "
"``del o[key]``\\와 동등합니다. 이것은 :c:func:`PyObject_DelItem`\\의 별칭입니다."

#: ../Doc/c-api/mapping.rst:53
msgid ""
"Remove the mapping for the string *key* from the object *o*.  Return "
"``-1`` on failure.  This is equivalent to the Python statement ``del "
"o[key]``."
msgstr ""
"객체 *o*\\에서 문자열 *key*\\에 대한 매핑을 제거합니다. 실패하면 ``-1``\\을 반환합니다. 이것은 파이썬 문장 "
"``del o[key]``\\와 동등합니다."

#: ../Doc/c-api/mapping.rst:59 ../Doc/c-api/mapping.rst:70
msgid ""
"Return ``1`` if the mapping object has the key *key* and ``0`` otherwise."
" This is equivalent to the Python expression ``key in o``. This function "
"always succeeds."
msgstr ""
"매핑 객체에 *key* 키가 있으면 ``1``\\을 반환하고, 그렇지 않으면 ``0``\\을 반환합니다. 이는 파이썬 표현식 "
"``key in o``\\와 동등합니다. 이 함수는 항상 성공합니다."

#: ../Doc/c-api/mapping.rst:63
msgid ""
"Note that exceptions which occur while calling the :meth:`__getitem__` "
"method will get suppressed. To get error reporting use "
":c:func:`PyObject_GetItem()` instead."
msgstr ""
":meth:`__getitem__` 메서드를 호출하는 동안 발생하는 예외는 억제됨에 유의하십시오. 에러 보고를 받으려면 대신 "
":c:func:`PyObject_GetItem()`\\을 사용하십시오."

#: ../Doc/c-api/mapping.rst:74
msgid ""
"Note that exceptions which occur while calling the :meth:`__getitem__` "
"method and creating a temporary string object will get suppressed. To get"
" error reporting use :c:func:`PyMapping_GetItemString()` instead."
msgstr ""
":meth:`__getitem__` 메서드를 호출하고 임시 문자열 객체를 만드는 동안 발생하는 예외는 억제됨에 유의하십시오. 에러 보고를"
" 받으려면 대신 :c:func:`PyMapping_GetItemString()`\\을 사용하십시오."

#: ../Doc/c-api/mapping.rst:81
msgid ""
"On success, return a list of the keys in object *o*.  On failure, return "
"*NULL*."
msgstr "성공하면, 객체 *o*\\의 키 리스트를 반환합니다. 실패하면, *NULL*\\을 반환합니다."

#: ../Doc/c-api/mapping.rst:84 ../Doc/c-api/mapping.rst:93
#: ../Doc/c-api/mapping.rst:102
msgid "Previously, the function returned a list or a tuple."
msgstr "이전에는 함수가 리스트나 튜플을 반환했습니다."

#: ../Doc/c-api/mapping.rst:90
msgid ""
"On success, return a list of the values in object *o*.  On failure, "
"return *NULL*."
msgstr "성공하면, 객체 *o*\\의 값 리스트를 반환합니다. 실패하면, *NULL*\\을 반환합니다."

#: ../Doc/c-api/mapping.rst:99
msgid ""
"On success, return a list of the items in object *o*, where each item is "
"a tuple containing a key-value pair.  On failure, return *NULL*."
msgstr ""
"성공하면, 객체 *o*\\에 있는 항목 리스트를 반환합니다. 여기서 각 항목은 키-값 쌍을 포함하는 튜플입니다. 실패하면, "
"*NULL*\\을 반환합니다."
