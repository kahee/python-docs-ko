# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-11-26 18:49+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dong-gweon Oh <flowdas@gmail.com>\n"
"Language-Team: Korean (https://python.flowdas.com)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"

#: ../Doc/library/pty.rst:2
msgid ":mod:`pty` --- Pseudo-terminal utilities"
msgstr ":mod:`pty` --- 의사 터미널 유틸리티"

#: ../Doc/library/pty.rst:11
msgid "**Source code:** :source:`Lib/pty.py`"
msgstr "**소스 코드:** :source:`Lib/pty.py`"

#: ../Doc/library/pty.rst:15
msgid ""
"The :mod:`pty` module defines operations for handling the pseudo-terminal"
" concept: starting another process and being able to write to and read "
"from its controlling terminal programmatically."
msgstr ""
":mod:`pty` 모듈은 의사 터미널 개념을 처리하기 위한 연산을 정의합니다: 다른 프로세스를 시작하고, 그것의 제어 터미널에 "
"프로그래밍 방식으로 쓰고 읽습니다."

#: ../Doc/library/pty.rst:19
msgid ""
"Because pseudo-terminal handling is highly platform dependent, there is "
"code to do it only for Linux. (The Linux code is supposed to work on "
"other platforms, but hasn't been tested yet.)"
msgstr ""
"의사 터미널 처리는 플랫폼에 따라 매우 다르므로, 리눅스에서만 수행할 수 있는 코드가 있습니다. (리눅스 코드는 다른 플랫폼에서도 "
"작동하리라고 기대되지만, 아직 테스트 되지는 않았습니다.)"

#: ../Doc/library/pty.rst:23
msgid "The :mod:`pty` module defines the following functions:"
msgstr ":mod:`pty` 모듈은 다음 함수를 정의합니다:"

#: ../Doc/library/pty.rst:28
msgid ""
"Fork. Connect the child's controlling terminal to a pseudo-terminal. "
"Return value is ``(pid, fd)``. Note that the child  gets *pid* 0, and the"
" *fd* is *invalid*. The parent's return value is the *pid* of the child, "
"and *fd* is a file descriptor connected to the child's controlling "
"terminal (and also to the child's standard input and output)."
msgstr ""
"포크. 자식의 제어 터미널을 의사 터미널에 연결합니다. 반환 값은 ``(pid, fd)``\\입니다. 자식은 *pid* 0을 받고, "
"*fd*\\는 *유효하지 않음*\\에 유의하십시오. 부모의 반환 값은 자식의 *pid*\\이고, *fd*\\는 자식의 제어 터미널(또한,"
" 자식의 표준 입력과 출력)에 연결된 파일 기술자입니다."

#: ../Doc/library/pty.rst:37
msgid ""
"Open a new pseudo-terminal pair, using :func:`os.openpty` if possible, or"
" emulation code for generic Unix systems. Return a pair of file "
"descriptors ``(master, slave)``, for the master and the slave end, "
"respectively."
msgstr ""
"가능하면 :func:`os.openpty`\\를 사용하고, 그렇지 않으면 일반 유닉스 시스템을 위한 에뮬레이션 코드를 사용해서 새로운 "
"의사 터미널 쌍을 엽니다. 각각 마스터와 슬레이브인 파일 기술자 쌍 ``(master, slave)``\\를 반환합니다."

#: ../Doc/library/pty.rst:44
msgid ""
"Spawn a process, and connect its controlling terminal with the current "
"process's standard io. This is often used to baffle programs which insist"
" on reading from the controlling terminal."
msgstr ""
"프로세스를 스폰하고, 그것의 제어 터미널을 현재 프로세스의 표준 입출력과 연결합니다. 이것은 종종 제어 터미널에서 읽으려고 하는 "
"프로그램을 조절하는 데 사용됩니다."

#: ../Doc/library/pty.rst:48
msgid ""
"The functions *master_read* and *stdin_read* should be functions which "
"read from a file descriptor. The defaults try to read 1024 bytes each "
"time they are called."
msgstr ""
"함수 *master_read*\\와 *stdin_read*\\는 파일 기술자로부터 읽는 함수여야 합니다. 기본값은 호출할 때마다 "
"1024바이트를 읽으려고 합니다."

#: ../Doc/library/pty.rst:52
msgid ""
":func:`spawn` now returns the status value from :func:`os.waitpid` on the"
" child process."
msgstr "이제 :func:`spawn`\\은 자식 프로세스에 대한 :func:`os.waitpid`\\로부터 온 상태 값을 반환합니다."

#: ../Doc/library/pty.rst:57
msgid "Example"
msgstr "예제"

#: ../Doc/library/pty.rst:61
msgid ""
"The following program acts like the Unix command :manpage:`script(1)`, "
"using a pseudo-terminal to record all input and output of a terminal "
"session in a \"typescript\". ::"
msgstr ""
"다음 프로그램은 유닉스 명령 :manpage:`script(1)`\\과 유사하게 동작하며, 의사 터미널을 사용하여 터미널 세션의 모든 "
"입력과 출력을 \"typescript\"에 기록합니다. ::"
